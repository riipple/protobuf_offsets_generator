// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobufs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobufs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobufs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobufs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobufs_2eproto;
class CBaseUserCmdPB;
struct CBaseUserCmdPBDefaultTypeInternal;
extern CBaseUserCmdPBDefaultTypeInternal _CBaseUserCmdPB_default_instance_;
class CInButtonStatePB;
struct CInButtonStatePBDefaultTypeInternal;
extern CInButtonStatePBDefaultTypeInternal _CInButtonStatePB_default_instance_;
class CMsgQAngle;
struct CMsgQAngleDefaultTypeInternal;
extern CMsgQAngleDefaultTypeInternal _CMsgQAngle_default_instance_;
class CMsgVector;
struct CMsgVectorDefaultTypeInternal;
extern CMsgVectorDefaultTypeInternal _CMsgVector_default_instance_;
class CSGOInputHistoryEntryPB;
struct CSGOInputHistoryEntryPBDefaultTypeInternal;
extern CSGOInputHistoryEntryPBDefaultTypeInternal _CSGOInputHistoryEntryPB_default_instance_;
class CSGOInterpolationInfoPB;
struct CSGOInterpolationInfoPBDefaultTypeInternal;
extern CSGOInterpolationInfoPBDefaultTypeInternal _CSGOInterpolationInfoPB_default_instance_;
class CSGOUserCmdPB;
struct CSGOUserCmdPBDefaultTypeInternal;
extern CSGOUserCmdPBDefaultTypeInternal _CSGOUserCmdPB_default_instance_;
class CSubtickMoveStep;
struct CSubtickMoveStepDefaultTypeInternal;
extern CSubtickMoveStepDefaultTypeInternal _CSubtickMoveStep_default_instance_;
class CUserMessage_Inventory_Response;
struct CUserMessage_Inventory_ResponseDefaultTypeInternal;
extern CUserMessage_Inventory_ResponseDefaultTypeInternal _CUserMessage_Inventory_Response_default_instance_;
class CUserMessage_Inventory_Response_InventoryDetail;
struct CUserMessage_Inventory_Response_InventoryDetailDefaultTypeInternal;
extern CUserMessage_Inventory_Response_InventoryDetailDefaultTypeInternal _CUserMessage_Inventory_Response_InventoryDetail_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBaseUserCmdPB* Arena::CreateMaybeMessage<::CBaseUserCmdPB>(Arena*);
template<> ::CInButtonStatePB* Arena::CreateMaybeMessage<::CInButtonStatePB>(Arena*);
template<> ::CMsgQAngle* Arena::CreateMaybeMessage<::CMsgQAngle>(Arena*);
template<> ::CMsgVector* Arena::CreateMaybeMessage<::CMsgVector>(Arena*);
template<> ::CSGOInputHistoryEntryPB* Arena::CreateMaybeMessage<::CSGOInputHistoryEntryPB>(Arena*);
template<> ::CSGOInterpolationInfoPB* Arena::CreateMaybeMessage<::CSGOInterpolationInfoPB>(Arena*);
template<> ::CSGOUserCmdPB* Arena::CreateMaybeMessage<::CSGOUserCmdPB>(Arena*);
template<> ::CSubtickMoveStep* Arena::CreateMaybeMessage<::CSubtickMoveStep>(Arena*);
template<> ::CUserMessage_Inventory_Response* Arena::CreateMaybeMessage<::CUserMessage_Inventory_Response>(Arena*);
template<> ::CUserMessage_Inventory_Response_InventoryDetail* Arena::CreateMaybeMessage<::CUserMessage_Inventory_Response_InventoryDetail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CSGOUserCmdPB_EWeaponDecision : int {
  CSGOUserCmdPB_EWeaponDecision_k_eNone = 0,
  CSGOUserCmdPB_EWeaponDecision_k_ePrimaryAttack = 1,
  CSGOUserCmdPB_EWeaponDecision_k_eSecondaryAttack = 2,
  CSGOUserCmdPB_EWeaponDecision_k_eZoom = 3,
  CSGOUserCmdPB_EWeaponDecision_k_eReload = 4
};
bool CSGOUserCmdPB_EWeaponDecision_IsValid(int value);
constexpr CSGOUserCmdPB_EWeaponDecision CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_MIN = CSGOUserCmdPB_EWeaponDecision_k_eNone;
constexpr CSGOUserCmdPB_EWeaponDecision CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_MAX = CSGOUserCmdPB_EWeaponDecision_k_eReload;
constexpr int CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_ARRAYSIZE = CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSGOUserCmdPB_EWeaponDecision_descriptor();
template<typename T>
inline const std::string& CSGOUserCmdPB_EWeaponDecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSGOUserCmdPB_EWeaponDecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSGOUserCmdPB_EWeaponDecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSGOUserCmdPB_EWeaponDecision_descriptor(), enum_t_value);
}
inline bool CSGOUserCmdPB_EWeaponDecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSGOUserCmdPB_EWeaponDecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSGOUserCmdPB_EWeaponDecision>(
    CSGOUserCmdPB_EWeaponDecision_descriptor(), name, value);
}
// ===================================================================

class CMsgVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVector) */ {
 public:
  inline CMsgVector() : CMsgVector(nullptr) {}
  ~CMsgVector() override;
  explicit PROTOBUF_CONSTEXPR CMsgVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVector(const CMsgVector& from);
  CMsgVector(CMsgVector&& from) noexcept
    : CMsgVector() {
    *this = ::std::move(from);
  }

  inline CMsgVector& operator=(const CMsgVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVector& operator=(CMsgVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVector* internal_default_instance() {
    return reinterpret_cast<const CMsgVector*>(
               &_CMsgVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgVector& a, CMsgVector& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgVector& from) {
    CMsgVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVector";
  }
  protected:
  explicit CMsgVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
    float w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgQAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQAngle) */ {
 public:
  inline CMsgQAngle() : CMsgQAngle(nullptr) {}
  ~CMsgQAngle() override;
  explicit PROTOBUF_CONSTEXPR CMsgQAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQAngle(const CMsgQAngle& from);
  CMsgQAngle(CMsgQAngle&& from) noexcept
    : CMsgQAngle() {
    *this = ::std::move(from);
  }

  inline CMsgQAngle& operator=(const CMsgQAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQAngle& operator=(CMsgQAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQAngle* internal_default_instance() {
    return reinterpret_cast<const CMsgQAngle*>(
               &_CMsgQAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgQAngle& a, CMsgQAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgQAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgQAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgQAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgQAngle& from) {
    CMsgQAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQAngle";
  }
  protected:
  explicit CMsgQAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CInButtonStatePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CInButtonStatePB) */ {
 public:
  inline CInButtonStatePB() : CInButtonStatePB(nullptr) {}
  ~CInButtonStatePB() override;
  explicit PROTOBUF_CONSTEXPR CInButtonStatePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CInButtonStatePB(const CInButtonStatePB& from);
  CInButtonStatePB(CInButtonStatePB&& from) noexcept
    : CInButtonStatePB() {
    *this = ::std::move(from);
  }

  inline CInButtonStatePB& operator=(const CInButtonStatePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInButtonStatePB& operator=(CInButtonStatePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInButtonStatePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInButtonStatePB* internal_default_instance() {
    return reinterpret_cast<const CInButtonStatePB*>(
               &_CInButtonStatePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CInButtonStatePB& a, CInButtonStatePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CInButtonStatePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInButtonStatePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInButtonStatePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CInButtonStatePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CInButtonStatePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CInButtonStatePB& from) {
    CInButtonStatePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CInButtonStatePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CInButtonStatePB";
  }
  protected:
  explicit CInButtonStatePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonstate1FieldNumber = 1,
    kButtonstate2FieldNumber = 2,
    kButtonstate3FieldNumber = 3,
  };
  // optional uint64 buttonstate1 = 1;
  bool has_buttonstate1() const;
  private:
  bool _internal_has_buttonstate1() const;
  public:
  void clear_buttonstate1();
  uint64_t buttonstate1() const;
  void set_buttonstate1(uint64_t value);
  private:
  uint64_t _internal_buttonstate1() const;
  void _internal_set_buttonstate1(uint64_t value);
  public:

  // optional uint64 buttonstate2 = 2;
  bool has_buttonstate2() const;
  private:
  bool _internal_has_buttonstate2() const;
  public:
  void clear_buttonstate2();
  uint64_t buttonstate2() const;
  void set_buttonstate2(uint64_t value);
  private:
  uint64_t _internal_buttonstate2() const;
  void _internal_set_buttonstate2(uint64_t value);
  public:

  // optional uint64 buttonstate3 = 3;
  bool has_buttonstate3() const;
  private:
  bool _internal_has_buttonstate3() const;
  public:
  void clear_buttonstate3();
  uint64_t buttonstate3() const;
  void set_buttonstate3(uint64_t value);
  private:
  uint64_t _internal_buttonstate3() const;
  void _internal_set_buttonstate3(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CInButtonStatePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t buttonstate1_;
    uint64_t buttonstate2_;
    uint64_t buttonstate3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CSubtickMoveStep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSubtickMoveStep) */ {
 public:
  inline CSubtickMoveStep() : CSubtickMoveStep(nullptr) {}
  ~CSubtickMoveStep() override;
  explicit PROTOBUF_CONSTEXPR CSubtickMoveStep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSubtickMoveStep(const CSubtickMoveStep& from);
  CSubtickMoveStep(CSubtickMoveStep&& from) noexcept
    : CSubtickMoveStep() {
    *this = ::std::move(from);
  }

  inline CSubtickMoveStep& operator=(const CSubtickMoveStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSubtickMoveStep& operator=(CSubtickMoveStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSubtickMoveStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSubtickMoveStep* internal_default_instance() {
    return reinterpret_cast<const CSubtickMoveStep*>(
               &_CSubtickMoveStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSubtickMoveStep& a, CSubtickMoveStep& b) {
    a.Swap(&b);
  }
  inline void Swap(CSubtickMoveStep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSubtickMoveStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSubtickMoveStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSubtickMoveStep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSubtickMoveStep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSubtickMoveStep& from) {
    CSubtickMoveStep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSubtickMoveStep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSubtickMoveStep";
  }
  protected:
  explicit CSubtickMoveStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonFieldNumber = 1,
    kPressedFieldNumber = 2,
    kWhenFieldNumber = 3,
  };
  // optional uint64 button = 1;
  bool has_button() const;
  private:
  bool _internal_has_button() const;
  public:
  void clear_button();
  uint64_t button() const;
  void set_button(uint64_t value);
  private:
  uint64_t _internal_button() const;
  void _internal_set_button(uint64_t value);
  public:

  // optional bool pressed = 2;
  bool has_pressed() const;
  private:
  bool _internal_has_pressed() const;
  public:
  void clear_pressed();
  bool pressed() const;
  void set_pressed(bool value);
  private:
  bool _internal_pressed() const;
  void _internal_set_pressed(bool value);
  public:

  // optional float when = 3;
  bool has_when() const;
  private:
  bool _internal_has_when() const;
  public:
  void clear_when();
  float when() const;
  void set_when(float value);
  private:
  float _internal_when() const;
  void _internal_set_when(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSubtickMoveStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t button_;
    bool pressed_;
    float when_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CBaseUserCmdPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBaseUserCmdPB) */ {
 public:
  inline CBaseUserCmdPB() : CBaseUserCmdPB(nullptr) {}
  ~CBaseUserCmdPB() override;
  explicit PROTOBUF_CONSTEXPR CBaseUserCmdPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBaseUserCmdPB(const CBaseUserCmdPB& from);
  CBaseUserCmdPB(CBaseUserCmdPB&& from) noexcept
    : CBaseUserCmdPB() {
    *this = ::std::move(from);
  }

  inline CBaseUserCmdPB& operator=(const CBaseUserCmdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBaseUserCmdPB& operator=(CBaseUserCmdPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBaseUserCmdPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBaseUserCmdPB* internal_default_instance() {
    return reinterpret_cast<const CBaseUserCmdPB*>(
               &_CBaseUserCmdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CBaseUserCmdPB& a, CBaseUserCmdPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CBaseUserCmdPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBaseUserCmdPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBaseUserCmdPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBaseUserCmdPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBaseUserCmdPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CBaseUserCmdPB& from) {
    CBaseUserCmdPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBaseUserCmdPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBaseUserCmdPB";
  }
  protected:
  explicit CBaseUserCmdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtickMovesFieldNumber = 18,
    kMoveCrcFieldNumber = 19,
    kButtonsPbFieldNumber = 3,
    kViewanglesFieldNumber = 4,
    kCommandNumberFieldNumber = 1,
    kTickCountFieldNumber = 2,
    kForwardmoveFieldNumber = 5,
    kLeftmoveFieldNumber = 6,
    kUpmoveFieldNumber = 7,
    kImpulseFieldNumber = 8,
    kWeaponselectFieldNumber = 9,
    kRandomSeedFieldNumber = 10,
    kMousedxFieldNumber = 11,
    kMousedyFieldNumber = 12,
    kConsumedServerAngleChangesFieldNumber = 20,
    kCmdFlagsFieldNumber = 21,
    kPawnEntityHandleFieldNumber = 14,
  };
  // repeated .CSubtickMoveStep subtick_moves = 18;
  int subtick_moves_size() const;
  private:
  int _internal_subtick_moves_size() const;
  public:
  void clear_subtick_moves();
  ::CSubtickMoveStep* mutable_subtick_moves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSubtickMoveStep >*
      mutable_subtick_moves();
  private:
  const ::CSubtickMoveStep& _internal_subtick_moves(int index) const;
  ::CSubtickMoveStep* _internal_add_subtick_moves();
  public:
  const ::CSubtickMoveStep& subtick_moves(int index) const;
  ::CSubtickMoveStep* add_subtick_moves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSubtickMoveStep >&
      subtick_moves() const;

  // optional bytes move_crc = 19;
  bool has_move_crc() const;
  private:
  bool _internal_has_move_crc() const;
  public:
  void clear_move_crc();
  const std::string& move_crc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_move_crc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_move_crc();
  PROTOBUF_NODISCARD std::string* release_move_crc();
  void set_allocated_move_crc(std::string* move_crc);
  private:
  const std::string& _internal_move_crc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move_crc(const std::string& value);
  std::string* _internal_mutable_move_crc();
  public:

  // optional .CInButtonStatePB buttons_pb = 3;
  bool has_buttons_pb() const;
  private:
  bool _internal_has_buttons_pb() const;
  public:
  void clear_buttons_pb();
  const ::CInButtonStatePB& buttons_pb() const;
  PROTOBUF_NODISCARD ::CInButtonStatePB* release_buttons_pb();
  ::CInButtonStatePB* mutable_buttons_pb();
  void set_allocated_buttons_pb(::CInButtonStatePB* buttons_pb);
  private:
  const ::CInButtonStatePB& _internal_buttons_pb() const;
  ::CInButtonStatePB* _internal_mutable_buttons_pb();
  public:
  void unsafe_arena_set_allocated_buttons_pb(
      ::CInButtonStatePB* buttons_pb);
  ::CInButtonStatePB* unsafe_arena_release_buttons_pb();

  // optional .CMsgQAngle viewangles = 4;
  bool has_viewangles() const;
  private:
  bool _internal_has_viewangles() const;
  public:
  void clear_viewangles();
  const ::CMsgQAngle& viewangles() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_viewangles();
  ::CMsgQAngle* mutable_viewangles();
  void set_allocated_viewangles(::CMsgQAngle* viewangles);
  private:
  const ::CMsgQAngle& _internal_viewangles() const;
  ::CMsgQAngle* _internal_mutable_viewangles();
  public:
  void unsafe_arena_set_allocated_viewangles(
      ::CMsgQAngle* viewangles);
  ::CMsgQAngle* unsafe_arena_release_viewangles();

  // optional int32 command_number = 1;
  bool has_command_number() const;
  private:
  bool _internal_has_command_number() const;
  public:
  void clear_command_number();
  int32_t command_number() const;
  void set_command_number(int32_t value);
  private:
  int32_t _internal_command_number() const;
  void _internal_set_command_number(int32_t value);
  public:

  // optional int32 tick_count = 2;
  bool has_tick_count() const;
  private:
  bool _internal_has_tick_count() const;
  public:
  void clear_tick_count();
  int32_t tick_count() const;
  void set_tick_count(int32_t value);
  private:
  int32_t _internal_tick_count() const;
  void _internal_set_tick_count(int32_t value);
  public:

  // optional float forwardmove = 5;
  bool has_forwardmove() const;
  private:
  bool _internal_has_forwardmove() const;
  public:
  void clear_forwardmove();
  float forwardmove() const;
  void set_forwardmove(float value);
  private:
  float _internal_forwardmove() const;
  void _internal_set_forwardmove(float value);
  public:

  // optional float leftmove = 6;
  bool has_leftmove() const;
  private:
  bool _internal_has_leftmove() const;
  public:
  void clear_leftmove();
  float leftmove() const;
  void set_leftmove(float value);
  private:
  float _internal_leftmove() const;
  void _internal_set_leftmove(float value);
  public:

  // optional float upmove = 7;
  bool has_upmove() const;
  private:
  bool _internal_has_upmove() const;
  public:
  void clear_upmove();
  float upmove() const;
  void set_upmove(float value);
  private:
  float _internal_upmove() const;
  void _internal_set_upmove(float value);
  public:

  // optional int32 impulse = 8;
  bool has_impulse() const;
  private:
  bool _internal_has_impulse() const;
  public:
  void clear_impulse();
  int32_t impulse() const;
  void set_impulse(int32_t value);
  private:
  int32_t _internal_impulse() const;
  void _internal_set_impulse(int32_t value);
  public:

  // optional int32 weaponselect = 9;
  bool has_weaponselect() const;
  private:
  bool _internal_has_weaponselect() const;
  public:
  void clear_weaponselect();
  int32_t weaponselect() const;
  void set_weaponselect(int32_t value);
  private:
  int32_t _internal_weaponselect() const;
  void _internal_set_weaponselect(int32_t value);
  public:

  // optional int32 random_seed = 10;
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  int32_t random_seed() const;
  void set_random_seed(int32_t value);
  private:
  int32_t _internal_random_seed() const;
  void _internal_set_random_seed(int32_t value);
  public:

  // optional int32 mousedx = 11;
  bool has_mousedx() const;
  private:
  bool _internal_has_mousedx() const;
  public:
  void clear_mousedx();
  int32_t mousedx() const;
  void set_mousedx(int32_t value);
  private:
  int32_t _internal_mousedx() const;
  void _internal_set_mousedx(int32_t value);
  public:

  // optional int32 mousedy = 12;
  bool has_mousedy() const;
  private:
  bool _internal_has_mousedy() const;
  public:
  void clear_mousedy();
  int32_t mousedy() const;
  void set_mousedy(int32_t value);
  private:
  int32_t _internal_mousedy() const;
  void _internal_set_mousedy(int32_t value);
  public:

  // optional uint32 consumed_server_angle_changes = 20;
  bool has_consumed_server_angle_changes() const;
  private:
  bool _internal_has_consumed_server_angle_changes() const;
  public:
  void clear_consumed_server_angle_changes();
  uint32_t consumed_server_angle_changes() const;
  void set_consumed_server_angle_changes(uint32_t value);
  private:
  uint32_t _internal_consumed_server_angle_changes() const;
  void _internal_set_consumed_server_angle_changes(uint32_t value);
  public:

  // optional int32 cmd_flags = 21;
  bool has_cmd_flags() const;
  private:
  bool _internal_has_cmd_flags() const;
  public:
  void clear_cmd_flags();
  int32_t cmd_flags() const;
  void set_cmd_flags(int32_t value);
  private:
  int32_t _internal_cmd_flags() const;
  void _internal_set_cmd_flags(int32_t value);
  public:

  // optional uint32 pawn_entity_handle = 14 [default = 16777215];
  bool has_pawn_entity_handle() const;
  private:
  bool _internal_has_pawn_entity_handle() const;
  public:
  void clear_pawn_entity_handle();
  uint32_t pawn_entity_handle() const;
  void set_pawn_entity_handle(uint32_t value);
  private:
  uint32_t _internal_pawn_entity_handle() const;
  void _internal_set_pawn_entity_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBaseUserCmdPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSubtickMoveStep > subtick_moves_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr move_crc_;
    ::CInButtonStatePB* buttons_pb_;
    ::CMsgQAngle* viewangles_;
    int32_t command_number_;
    int32_t tick_count_;
    float forwardmove_;
    float leftmove_;
    float upmove_;
    int32_t impulse_;
    int32_t weaponselect_;
    int32_t random_seed_;
    int32_t mousedx_;
    int32_t mousedy_;
    uint32_t consumed_server_angle_changes_;
    int32_t cmd_flags_;
    uint32_t pawn_entity_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CSGOInterpolationInfoPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSGOInterpolationInfoPB) */ {
 public:
  inline CSGOInterpolationInfoPB() : CSGOInterpolationInfoPB(nullptr) {}
  ~CSGOInterpolationInfoPB() override;
  explicit PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSGOInterpolationInfoPB(const CSGOInterpolationInfoPB& from);
  CSGOInterpolationInfoPB(CSGOInterpolationInfoPB&& from) noexcept
    : CSGOInterpolationInfoPB() {
    *this = ::std::move(from);
  }

  inline CSGOInterpolationInfoPB& operator=(const CSGOInterpolationInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOInterpolationInfoPB& operator=(CSGOInterpolationInfoPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOInterpolationInfoPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSGOInterpolationInfoPB* internal_default_instance() {
    return reinterpret_cast<const CSGOInterpolationInfoPB*>(
               &_CSGOInterpolationInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSGOInterpolationInfoPB& a, CSGOInterpolationInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGOInterpolationInfoPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOInterpolationInfoPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOInterpolationInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSGOInterpolationInfoPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSGOInterpolationInfoPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSGOInterpolationInfoPB& from) {
    CSGOInterpolationInfoPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGOInterpolationInfoPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSGOInterpolationInfoPB";
  }
  protected:
  explicit CSGOInterpolationInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFracFieldNumber = 3,
    kSrcTickFieldNumber = 1,
    kDstTickFieldNumber = 2,
  };
  // optional float frac = 3 [default = 0];
  bool has_frac() const;
  private:
  bool _internal_has_frac() const;
  public:
  void clear_frac();
  float frac() const;
  void set_frac(float value);
  private:
  float _internal_frac() const;
  void _internal_set_frac(float value);
  public:

  // optional int32 src_tick = 1 [default = -1];
  bool has_src_tick() const;
  private:
  bool _internal_has_src_tick() const;
  public:
  void clear_src_tick();
  int32_t src_tick() const;
  void set_src_tick(int32_t value);
  private:
  int32_t _internal_src_tick() const;
  void _internal_set_src_tick(int32_t value);
  public:

  // optional int32 dst_tick = 2 [default = -1];
  bool has_dst_tick() const;
  private:
  bool _internal_has_dst_tick() const;
  public:
  void clear_dst_tick();
  int32_t dst_tick() const;
  void set_dst_tick(int32_t value);
  private:
  int32_t _internal_dst_tick() const;
  void _internal_set_dst_tick(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSGOInterpolationInfoPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float frac_;
    int32_t src_tick_;
    int32_t dst_tick_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CSGOInputHistoryEntryPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSGOInputHistoryEntryPB) */ {
 public:
  inline CSGOInputHistoryEntryPB() : CSGOInputHistoryEntryPB(nullptr) {}
  ~CSGOInputHistoryEntryPB() override;
  explicit PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSGOInputHistoryEntryPB(const CSGOInputHistoryEntryPB& from);
  CSGOInputHistoryEntryPB(CSGOInputHistoryEntryPB&& from) noexcept
    : CSGOInputHistoryEntryPB() {
    *this = ::std::move(from);
  }

  inline CSGOInputHistoryEntryPB& operator=(const CSGOInputHistoryEntryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOInputHistoryEntryPB& operator=(CSGOInputHistoryEntryPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOInputHistoryEntryPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSGOInputHistoryEntryPB* internal_default_instance() {
    return reinterpret_cast<const CSGOInputHistoryEntryPB*>(
               &_CSGOInputHistoryEntryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CSGOInputHistoryEntryPB& a, CSGOInputHistoryEntryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGOInputHistoryEntryPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOInputHistoryEntryPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOInputHistoryEntryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSGOInputHistoryEntryPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSGOInputHistoryEntryPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSGOInputHistoryEntryPB& from) {
    CSGOInputHistoryEntryPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGOInputHistoryEntryPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSGOInputHistoryEntryPB";
  }
  protected:
  explicit CSGOInputHistoryEntryPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewAnglesFieldNumber = 2,
    kShootPositionFieldNumber = 3,
    kTargetHeadPosCheckFieldNumber = 9,
    kTargetAbsPosCheckFieldNumber = 10,
    kTargetAbsAngCheckFieldNumber = 11,
    kClInterpFieldNumber = 12,
    kSvInterp0FieldNumber = 13,
    kSvInterp1FieldNumber = 14,
    kPlayerInterpFieldNumber = 15,
    kRenderTickCountFieldNumber = 4,
    kRenderTickFractionFieldNumber = 5,
    kPlayerTickCountFieldNumber = 6,
    kPlayerTickFractionFieldNumber = 7,
    kFrameNumberFieldNumber = 20,
    kTargetEntIndexFieldNumber = 8,
  };
  // optional .CMsgQAngle view_angles = 2;
  bool has_view_angles() const;
  private:
  bool _internal_has_view_angles() const;
  public:
  void clear_view_angles();
  const ::CMsgQAngle& view_angles() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_view_angles();
  ::CMsgQAngle* mutable_view_angles();
  void set_allocated_view_angles(::CMsgQAngle* view_angles);
  private:
  const ::CMsgQAngle& _internal_view_angles() const;
  ::CMsgQAngle* _internal_mutable_view_angles();
  public:
  void unsafe_arena_set_allocated_view_angles(
      ::CMsgQAngle* view_angles);
  ::CMsgQAngle* unsafe_arena_release_view_angles();

  // optional .CMsgVector shoot_position = 3;
  bool has_shoot_position() const;
  private:
  bool _internal_has_shoot_position() const;
  public:
  void clear_shoot_position();
  const ::CMsgVector& shoot_position() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_shoot_position();
  ::CMsgVector* mutable_shoot_position();
  void set_allocated_shoot_position(::CMsgVector* shoot_position);
  private:
  const ::CMsgVector& _internal_shoot_position() const;
  ::CMsgVector* _internal_mutable_shoot_position();
  public:
  void unsafe_arena_set_allocated_shoot_position(
      ::CMsgVector* shoot_position);
  ::CMsgVector* unsafe_arena_release_shoot_position();

  // optional .CMsgVector target_head_pos_check = 9;
  bool has_target_head_pos_check() const;
  private:
  bool _internal_has_target_head_pos_check() const;
  public:
  void clear_target_head_pos_check();
  const ::CMsgVector& target_head_pos_check() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_target_head_pos_check();
  ::CMsgVector* mutable_target_head_pos_check();
  void set_allocated_target_head_pos_check(::CMsgVector* target_head_pos_check);
  private:
  const ::CMsgVector& _internal_target_head_pos_check() const;
  ::CMsgVector* _internal_mutable_target_head_pos_check();
  public:
  void unsafe_arena_set_allocated_target_head_pos_check(
      ::CMsgVector* target_head_pos_check);
  ::CMsgVector* unsafe_arena_release_target_head_pos_check();

  // optional .CMsgVector target_abs_pos_check = 10;
  bool has_target_abs_pos_check() const;
  private:
  bool _internal_has_target_abs_pos_check() const;
  public:
  void clear_target_abs_pos_check();
  const ::CMsgVector& target_abs_pos_check() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_target_abs_pos_check();
  ::CMsgVector* mutable_target_abs_pos_check();
  void set_allocated_target_abs_pos_check(::CMsgVector* target_abs_pos_check);
  private:
  const ::CMsgVector& _internal_target_abs_pos_check() const;
  ::CMsgVector* _internal_mutable_target_abs_pos_check();
  public:
  void unsafe_arena_set_allocated_target_abs_pos_check(
      ::CMsgVector* target_abs_pos_check);
  ::CMsgVector* unsafe_arena_release_target_abs_pos_check();

  // optional .CMsgQAngle target_abs_ang_check = 11;
  bool has_target_abs_ang_check() const;
  private:
  bool _internal_has_target_abs_ang_check() const;
  public:
  void clear_target_abs_ang_check();
  const ::CMsgQAngle& target_abs_ang_check() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_target_abs_ang_check();
  ::CMsgQAngle* mutable_target_abs_ang_check();
  void set_allocated_target_abs_ang_check(::CMsgQAngle* target_abs_ang_check);
  private:
  const ::CMsgQAngle& _internal_target_abs_ang_check() const;
  ::CMsgQAngle* _internal_mutable_target_abs_ang_check();
  public:
  void unsafe_arena_set_allocated_target_abs_ang_check(
      ::CMsgQAngle* target_abs_ang_check);
  ::CMsgQAngle* unsafe_arena_release_target_abs_ang_check();

  // optional .CSGOInterpolationInfoPB cl_interp = 12;
  bool has_cl_interp() const;
  private:
  bool _internal_has_cl_interp() const;
  public:
  void clear_cl_interp();
  const ::CSGOInterpolationInfoPB& cl_interp() const;
  PROTOBUF_NODISCARD ::CSGOInterpolationInfoPB* release_cl_interp();
  ::CSGOInterpolationInfoPB* mutable_cl_interp();
  void set_allocated_cl_interp(::CSGOInterpolationInfoPB* cl_interp);
  private:
  const ::CSGOInterpolationInfoPB& _internal_cl_interp() const;
  ::CSGOInterpolationInfoPB* _internal_mutable_cl_interp();
  public:
  void unsafe_arena_set_allocated_cl_interp(
      ::CSGOInterpolationInfoPB* cl_interp);
  ::CSGOInterpolationInfoPB* unsafe_arena_release_cl_interp();

  // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
  bool has_sv_interp0() const;
  private:
  bool _internal_has_sv_interp0() const;
  public:
  void clear_sv_interp0();
  const ::CSGOInterpolationInfoPB& sv_interp0() const;
  PROTOBUF_NODISCARD ::CSGOInterpolationInfoPB* release_sv_interp0();
  ::CSGOInterpolationInfoPB* mutable_sv_interp0();
  void set_allocated_sv_interp0(::CSGOInterpolationInfoPB* sv_interp0);
  private:
  const ::CSGOInterpolationInfoPB& _internal_sv_interp0() const;
  ::CSGOInterpolationInfoPB* _internal_mutable_sv_interp0();
  public:
  void unsafe_arena_set_allocated_sv_interp0(
      ::CSGOInterpolationInfoPB* sv_interp0);
  ::CSGOInterpolationInfoPB* unsafe_arena_release_sv_interp0();

  // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
  bool has_sv_interp1() const;
  private:
  bool _internal_has_sv_interp1() const;
  public:
  void clear_sv_interp1();
  const ::CSGOInterpolationInfoPB& sv_interp1() const;
  PROTOBUF_NODISCARD ::CSGOInterpolationInfoPB* release_sv_interp1();
  ::CSGOInterpolationInfoPB* mutable_sv_interp1();
  void set_allocated_sv_interp1(::CSGOInterpolationInfoPB* sv_interp1);
  private:
  const ::CSGOInterpolationInfoPB& _internal_sv_interp1() const;
  ::CSGOInterpolationInfoPB* _internal_mutable_sv_interp1();
  public:
  void unsafe_arena_set_allocated_sv_interp1(
      ::CSGOInterpolationInfoPB* sv_interp1);
  ::CSGOInterpolationInfoPB* unsafe_arena_release_sv_interp1();

  // optional .CSGOInterpolationInfoPB player_interp = 15;
  bool has_player_interp() const;
  private:
  bool _internal_has_player_interp() const;
  public:
  void clear_player_interp();
  const ::CSGOInterpolationInfoPB& player_interp() const;
  PROTOBUF_NODISCARD ::CSGOInterpolationInfoPB* release_player_interp();
  ::CSGOInterpolationInfoPB* mutable_player_interp();
  void set_allocated_player_interp(::CSGOInterpolationInfoPB* player_interp);
  private:
  const ::CSGOInterpolationInfoPB& _internal_player_interp() const;
  ::CSGOInterpolationInfoPB* _internal_mutable_player_interp();
  public:
  void unsafe_arena_set_allocated_player_interp(
      ::CSGOInterpolationInfoPB* player_interp);
  ::CSGOInterpolationInfoPB* unsafe_arena_release_player_interp();

  // optional int32 render_tick_count = 4;
  bool has_render_tick_count() const;
  private:
  bool _internal_has_render_tick_count() const;
  public:
  void clear_render_tick_count();
  int32_t render_tick_count() const;
  void set_render_tick_count(int32_t value);
  private:
  int32_t _internal_render_tick_count() const;
  void _internal_set_render_tick_count(int32_t value);
  public:

  // optional float render_tick_fraction = 5;
  bool has_render_tick_fraction() const;
  private:
  bool _internal_has_render_tick_fraction() const;
  public:
  void clear_render_tick_fraction();
  float render_tick_fraction() const;
  void set_render_tick_fraction(float value);
  private:
  float _internal_render_tick_fraction() const;
  void _internal_set_render_tick_fraction(float value);
  public:

  // optional int32 player_tick_count = 6;
  bool has_player_tick_count() const;
  private:
  bool _internal_has_player_tick_count() const;
  public:
  void clear_player_tick_count();
  int32_t player_tick_count() const;
  void set_player_tick_count(int32_t value);
  private:
  int32_t _internal_player_tick_count() const;
  void _internal_set_player_tick_count(int32_t value);
  public:

  // optional float player_tick_fraction = 7;
  bool has_player_tick_fraction() const;
  private:
  bool _internal_has_player_tick_fraction() const;
  public:
  void clear_player_tick_fraction();
  float player_tick_fraction() const;
  void set_player_tick_fraction(float value);
  private:
  float _internal_player_tick_fraction() const;
  void _internal_set_player_tick_fraction(float value);
  public:

  // optional int32 frame_number = 20;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  int32_t frame_number() const;
  void set_frame_number(int32_t value);
  private:
  int32_t _internal_frame_number() const;
  void _internal_set_frame_number(int32_t value);
  public:

  // optional int32 target_ent_index = 8 [default = -1];
  bool has_target_ent_index() const;
  private:
  bool _internal_has_target_ent_index() const;
  public:
  void clear_target_ent_index();
  int32_t target_ent_index() const;
  void set_target_ent_index(int32_t value);
  private:
  int32_t _internal_target_ent_index() const;
  void _internal_set_target_ent_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSGOInputHistoryEntryPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgQAngle* view_angles_;
    ::CMsgVector* shoot_position_;
    ::CMsgVector* target_head_pos_check_;
    ::CMsgVector* target_abs_pos_check_;
    ::CMsgQAngle* target_abs_ang_check_;
    ::CSGOInterpolationInfoPB* cl_interp_;
    ::CSGOInterpolationInfoPB* sv_interp0_;
    ::CSGOInterpolationInfoPB* sv_interp1_;
    ::CSGOInterpolationInfoPB* player_interp_;
    int32_t render_tick_count_;
    float render_tick_fraction_;
    int32_t player_tick_count_;
    float player_tick_fraction_;
    int32_t frame_number_;
    int32_t target_ent_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CSGOUserCmdPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSGOUserCmdPB) */ {
 public:
  inline CSGOUserCmdPB() : CSGOUserCmdPB(nullptr) {}
  ~CSGOUserCmdPB() override;
  explicit PROTOBUF_CONSTEXPR CSGOUserCmdPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSGOUserCmdPB(const CSGOUserCmdPB& from);
  CSGOUserCmdPB(CSGOUserCmdPB&& from) noexcept
    : CSGOUserCmdPB() {
    *this = ::std::move(from);
  }

  inline CSGOUserCmdPB& operator=(const CSGOUserCmdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOUserCmdPB& operator=(CSGOUserCmdPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOUserCmdPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSGOUserCmdPB* internal_default_instance() {
    return reinterpret_cast<const CSGOUserCmdPB*>(
               &_CSGOUserCmdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSGOUserCmdPB& a, CSGOUserCmdPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGOUserCmdPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOUserCmdPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOUserCmdPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSGOUserCmdPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSGOUserCmdPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSGOUserCmdPB& from) {
    CSGOUserCmdPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGOUserCmdPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSGOUserCmdPB";
  }
  protected:
  explicit CSGOUserCmdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSGOUserCmdPB_EWeaponDecision EWeaponDecision;
  static constexpr EWeaponDecision k_eNone =
    CSGOUserCmdPB_EWeaponDecision_k_eNone;
  static constexpr EWeaponDecision k_ePrimaryAttack =
    CSGOUserCmdPB_EWeaponDecision_k_ePrimaryAttack;
  static constexpr EWeaponDecision k_eSecondaryAttack =
    CSGOUserCmdPB_EWeaponDecision_k_eSecondaryAttack;
  static constexpr EWeaponDecision k_eZoom =
    CSGOUserCmdPB_EWeaponDecision_k_eZoom;
  static constexpr EWeaponDecision k_eReload =
    CSGOUserCmdPB_EWeaponDecision_k_eReload;
  static inline bool EWeaponDecision_IsValid(int value) {
    return CSGOUserCmdPB_EWeaponDecision_IsValid(value);
  }
  static constexpr EWeaponDecision EWeaponDecision_MIN =
    CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_MIN;
  static constexpr EWeaponDecision EWeaponDecision_MAX =
    CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_MAX;
  static constexpr int EWeaponDecision_ARRAYSIZE =
    CSGOUserCmdPB_EWeaponDecision_EWeaponDecision_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EWeaponDecision_descriptor() {
    return CSGOUserCmdPB_EWeaponDecision_descriptor();
  }
  template<typename T>
  static inline const std::string& EWeaponDecision_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EWeaponDecision>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EWeaponDecision_Name.");
    return CSGOUserCmdPB_EWeaponDecision_Name(enum_t_value);
  }
  static inline bool EWeaponDecision_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EWeaponDecision* value) {
    return CSGOUserCmdPB_EWeaponDecision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputHistoryFieldNumber = 2,
    kBaseFieldNumber = 1,
    kWeaponDecisionFieldNumber = 9,
    kWeaponDecisionWeaponFieldNumber = 10,
    kAttack3StartHistoryIndexFieldNumber = 8,
    kAttack1StartHistoryIndexFieldNumber = 6,
    kAttack2StartHistoryIndexFieldNumber = 7,
  };
  // repeated .CSGOInputHistoryEntryPB input_history = 2;
  int input_history_size() const;
  private:
  int _internal_input_history_size() const;
  public:
  void clear_input_history();
  ::CSGOInputHistoryEntryPB* mutable_input_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSGOInputHistoryEntryPB >*
      mutable_input_history();
  private:
  const ::CSGOInputHistoryEntryPB& _internal_input_history(int index) const;
  ::CSGOInputHistoryEntryPB* _internal_add_input_history();
  public:
  const ::CSGOInputHistoryEntryPB& input_history(int index) const;
  ::CSGOInputHistoryEntryPB* add_input_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSGOInputHistoryEntryPB >&
      input_history() const;

  // optional .CBaseUserCmdPB base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CBaseUserCmdPB& base() const;
  PROTOBUF_NODISCARD ::CBaseUserCmdPB* release_base();
  ::CBaseUserCmdPB* mutable_base();
  void set_allocated_base(::CBaseUserCmdPB* base);
  private:
  const ::CBaseUserCmdPB& _internal_base() const;
  ::CBaseUserCmdPB* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CBaseUserCmdPB* base);
  ::CBaseUserCmdPB* unsafe_arena_release_base();

  // optional .CSGOUserCmdPB.EWeaponDecision weapon_decision = 9 [default = k_eNone];
  bool has_weapon_decision() const;
  private:
  bool _internal_has_weapon_decision() const;
  public:
  void clear_weapon_decision();
  ::CSGOUserCmdPB_EWeaponDecision weapon_decision() const;
  void set_weapon_decision(::CSGOUserCmdPB_EWeaponDecision value);
  private:
  ::CSGOUserCmdPB_EWeaponDecision _internal_weapon_decision() const;
  void _internal_set_weapon_decision(::CSGOUserCmdPB_EWeaponDecision value);
  public:

  // optional int32 weapon_decision_weapon = 10;
  bool has_weapon_decision_weapon() const;
  private:
  bool _internal_has_weapon_decision_weapon() const;
  public:
  void clear_weapon_decision_weapon();
  int32_t weapon_decision_weapon() const;
  void set_weapon_decision_weapon(int32_t value);
  private:
  int32_t _internal_weapon_decision_weapon() const;
  void _internal_set_weapon_decision_weapon(int32_t value);
  public:

  // optional int32 attack3_start_history_index = 8 [default = -1];
  bool has_attack3_start_history_index() const;
  private:
  bool _internal_has_attack3_start_history_index() const;
  public:
  void clear_attack3_start_history_index();
  int32_t attack3_start_history_index() const;
  void set_attack3_start_history_index(int32_t value);
  private:
  int32_t _internal_attack3_start_history_index() const;
  void _internal_set_attack3_start_history_index(int32_t value);
  public:

  // optional int32 attack1_start_history_index = 6 [default = -1];
  bool has_attack1_start_history_index() const;
  private:
  bool _internal_has_attack1_start_history_index() const;
  public:
  void clear_attack1_start_history_index();
  int32_t attack1_start_history_index() const;
  void set_attack1_start_history_index(int32_t value);
  private:
  int32_t _internal_attack1_start_history_index() const;
  void _internal_set_attack1_start_history_index(int32_t value);
  public:

  // optional int32 attack2_start_history_index = 7 [default = -1];
  bool has_attack2_start_history_index() const;
  private:
  bool _internal_has_attack2_start_history_index() const;
  public:
  void clear_attack2_start_history_index();
  int32_t attack2_start_history_index() const;
  void set_attack2_start_history_index(int32_t value);
  private:
  int32_t _internal_attack2_start_history_index() const;
  void _internal_set_attack2_start_history_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSGOUserCmdPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSGOInputHistoryEntryPB > input_history_;
    ::CBaseUserCmdPB* base_;
    int weapon_decision_;
    int32_t weapon_decision_weapon_;
    int32_t attack3_start_history_index_;
    int32_t attack1_start_history_index_;
    int32_t attack2_start_history_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CUserMessage_Inventory_Response_InventoryDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserMessage_Inventory_Response.InventoryDetail) */ {
 public:
  inline CUserMessage_Inventory_Response_InventoryDetail() : CUserMessage_Inventory_Response_InventoryDetail(nullptr) {}
  ~CUserMessage_Inventory_Response_InventoryDetail() override;
  explicit PROTOBUF_CONSTEXPR CUserMessage_Inventory_Response_InventoryDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserMessage_Inventory_Response_InventoryDetail(const CUserMessage_Inventory_Response_InventoryDetail& from);
  CUserMessage_Inventory_Response_InventoryDetail(CUserMessage_Inventory_Response_InventoryDetail&& from) noexcept
    : CUserMessage_Inventory_Response_InventoryDetail() {
    *this = ::std::move(from);
  }

  inline CUserMessage_Inventory_Response_InventoryDetail& operator=(const CUserMessage_Inventory_Response_InventoryDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserMessage_Inventory_Response_InventoryDetail& operator=(CUserMessage_Inventory_Response_InventoryDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserMessage_Inventory_Response_InventoryDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserMessage_Inventory_Response_InventoryDetail* internal_default_instance() {
    return reinterpret_cast<const CUserMessage_Inventory_Response_InventoryDetail*>(
               &_CUserMessage_Inventory_Response_InventoryDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CUserMessage_Inventory_Response_InventoryDetail& a, CUserMessage_Inventory_Response_InventoryDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserMessage_Inventory_Response_InventoryDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserMessage_Inventory_Response_InventoryDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserMessage_Inventory_Response_InventoryDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserMessage_Inventory_Response_InventoryDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserMessage_Inventory_Response_InventoryDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CUserMessage_Inventory_Response_InventoryDetail& from) {
    CUserMessage_Inventory_Response_InventoryDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserMessage_Inventory_Response_InventoryDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserMessage_Inventory_Response.InventoryDetail";
  }
  protected:
  explicit CUserMessage_Inventory_Response_InventoryDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kBaseNameFieldNumber = 7,
    kPrimaryFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kFirstFieldNumber = 4,
    kIndexFieldNumber = 1,
    kBaseDetailFieldNumber = 8,
    kBaseFieldNumber = 5,
    kBaseTimeFieldNumber = 9,
    kBaseHashFieldNumber = 10,
  };
  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string base_name = 7;
  bool has_base_name() const;
  private:
  bool _internal_has_base_name() const;
  public:
  void clear_base_name();
  const std::string& base_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_name();
  PROTOBUF_NODISCARD std::string* release_base_name();
  void set_allocated_base_name(std::string* base_name);
  private:
  const std::string& _internal_base_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_name(const std::string& value);
  std::string* _internal_mutable_base_name();
  public:

  // optional int64 primary = 2;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  int64_t primary() const;
  void set_primary(int64_t value);
  private:
  int64_t _internal_primary() const;
  void _internal_set_primary(int64_t value);
  public:

  // optional int64 offset = 3;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // optional int64 first = 4;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  int64_t first() const;
  void set_first(int64_t value);
  private:
  int64_t _internal_first() const;
  void _internal_set_first(int64_t value);
  public:

  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // optional int32 base_detail = 8;
  bool has_base_detail() const;
  private:
  bool _internal_has_base_detail() const;
  public:
  void clear_base_detail();
  int32_t base_detail() const;
  void set_base_detail(int32_t value);
  private:
  int32_t _internal_base_detail() const;
  void _internal_set_base_detail(int32_t value);
  public:

  // optional int64 base = 5;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  int64_t base() const;
  void set_base(int64_t value);
  private:
  int64_t _internal_base() const;
  void _internal_set_base(int64_t value);
  public:

  // optional int32 base_time = 9;
  bool has_base_time() const;
  private:
  bool _internal_has_base_time() const;
  public:
  void clear_base_time();
  int32_t base_time() const;
  void set_base_time(int32_t value);
  private:
  int32_t _internal_base_time() const;
  void _internal_set_base_time(int32_t value);
  public:

  // optional int32 base_hash = 10;
  bool has_base_hash() const;
  private:
  bool _internal_has_base_hash() const;
  public:
  void clear_base_hash();
  int32_t base_hash() const;
  void set_base_hash(int32_t value);
  private:
  int32_t _internal_base_hash() const;
  void _internal_set_base_hash(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserMessage_Inventory_Response.InventoryDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_name_;
    int64_t primary_;
    int64_t offset_;
    int64_t first_;
    int32_t index_;
    int32_t base_detail_;
    int64_t base_;
    int32_t base_time_;
    int32_t base_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// -------------------------------------------------------------------

class CUserMessage_Inventory_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUserMessage_Inventory_Response) */ {
 public:
  inline CUserMessage_Inventory_Response() : CUserMessage_Inventory_Response(nullptr) {}
  ~CUserMessage_Inventory_Response() override;
  explicit PROTOBUF_CONSTEXPR CUserMessage_Inventory_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUserMessage_Inventory_Response(const CUserMessage_Inventory_Response& from);
  CUserMessage_Inventory_Response(CUserMessage_Inventory_Response&& from) noexcept
    : CUserMessage_Inventory_Response() {
    *this = ::std::move(from);
  }

  inline CUserMessage_Inventory_Response& operator=(const CUserMessage_Inventory_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserMessage_Inventory_Response& operator=(CUserMessage_Inventory_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserMessage_Inventory_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserMessage_Inventory_Response* internal_default_instance() {
    return reinterpret_cast<const CUserMessage_Inventory_Response*>(
               &_CUserMessage_Inventory_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CUserMessage_Inventory_Response& a, CUserMessage_Inventory_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CUserMessage_Inventory_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserMessage_Inventory_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserMessage_Inventory_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUserMessage_Inventory_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUserMessage_Inventory_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CUserMessage_Inventory_Response& from) {
    CUserMessage_Inventory_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserMessage_Inventory_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUserMessage_Inventory_Response";
  }
  protected:
  explicit CUserMessage_Inventory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CUserMessage_Inventory_Response_InventoryDetail InventoryDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kInventoriesFieldNumber = 9,
    kInventories2FieldNumber = 10,
    kInventories3FieldNumber = 14,
    kCrcFieldNumber = 1,
    kItemCountFieldNumber = 2,
    kOsversionFieldNumber = 5,
    kPerfTimeFieldNumber = 6,
    kClientTimestampFieldNumber = 7,
    kPlatformFieldNumber = 8,
    kInvTypeFieldNumber = 11,
    kBuildVersionFieldNumber = 12,
    kStartTimeFieldNumber = 15,
    kInstanceFieldNumber = 13,
  };
  // repeated .CUserMessage_Inventory_Response.InventoryDetail inventories = 9;
  int inventories_size() const;
  private:
  int _internal_inventories_size() const;
  public:
  void clear_inventories();
  ::CUserMessage_Inventory_Response_InventoryDetail* mutable_inventories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
      mutable_inventories();
  private:
  const ::CUserMessage_Inventory_Response_InventoryDetail& _internal_inventories(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* _internal_add_inventories();
  public:
  const ::CUserMessage_Inventory_Response_InventoryDetail& inventories(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* add_inventories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
      inventories() const;

  // repeated .CUserMessage_Inventory_Response.InventoryDetail inventories2 = 10;
  int inventories2_size() const;
  private:
  int _internal_inventories2_size() const;
  public:
  void clear_inventories2();
  ::CUserMessage_Inventory_Response_InventoryDetail* mutable_inventories2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
      mutable_inventories2();
  private:
  const ::CUserMessage_Inventory_Response_InventoryDetail& _internal_inventories2(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* _internal_add_inventories2();
  public:
  const ::CUserMessage_Inventory_Response_InventoryDetail& inventories2(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* add_inventories2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
      inventories2() const;

  // repeated .CUserMessage_Inventory_Response.InventoryDetail inventories3 = 14;
  int inventories3_size() const;
  private:
  int _internal_inventories3_size() const;
  public:
  void clear_inventories3();
  ::CUserMessage_Inventory_Response_InventoryDetail* mutable_inventories3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
      mutable_inventories3();
  private:
  const ::CUserMessage_Inventory_Response_InventoryDetail& _internal_inventories3(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* _internal_add_inventories3();
  public:
  const ::CUserMessage_Inventory_Response_InventoryDetail& inventories3(int index) const;
  ::CUserMessage_Inventory_Response_InventoryDetail* add_inventories3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
      inventories3() const;

  // optional fixed32 crc = 1;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  uint32_t crc() const;
  void set_crc(uint32_t value);
  private:
  uint32_t _internal_crc() const;
  void _internal_set_crc(uint32_t value);
  public:

  // optional int32 item_count = 2;
  bool has_item_count() const;
  private:
  bool _internal_has_item_count() const;
  public:
  void clear_item_count();
  int32_t item_count() const;
  void set_item_count(int32_t value);
  private:
  int32_t _internal_item_count() const;
  void _internal_set_item_count(int32_t value);
  public:

  // optional int32 osversion = 5;
  bool has_osversion() const;
  private:
  bool _internal_has_osversion() const;
  public:
  void clear_osversion();
  int32_t osversion() const;
  void set_osversion(int32_t value);
  private:
  int32_t _internal_osversion() const;
  void _internal_set_osversion(int32_t value);
  public:

  // optional int32 perf_time = 6;
  bool has_perf_time() const;
  private:
  bool _internal_has_perf_time() const;
  public:
  void clear_perf_time();
  int32_t perf_time() const;
  void set_perf_time(int32_t value);
  private:
  int32_t _internal_perf_time() const;
  void _internal_set_perf_time(int32_t value);
  public:

  // optional int32 client_timestamp = 7;
  bool has_client_timestamp() const;
  private:
  bool _internal_has_client_timestamp() const;
  public:
  void clear_client_timestamp();
  int32_t client_timestamp() const;
  void set_client_timestamp(int32_t value);
  private:
  int32_t _internal_client_timestamp() const;
  void _internal_set_client_timestamp(int32_t value);
  public:

  // optional int32 platform = 8;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  int32_t platform() const;
  void set_platform(int32_t value);
  private:
  int32_t _internal_platform() const;
  void _internal_set_platform(int32_t value);
  public:

  // optional int32 inv_type = 11;
  bool has_inv_type() const;
  private:
  bool _internal_has_inv_type() const;
  public:
  void clear_inv_type();
  int32_t inv_type() const;
  void set_inv_type(int32_t value);
  private:
  int32_t _internal_inv_type() const;
  void _internal_set_inv_type(int32_t value);
  public:

  // optional int32 build_version = 12;
  bool has_build_version() const;
  private:
  bool _internal_has_build_version() const;
  public:
  void clear_build_version();
  int32_t build_version() const;
  void set_build_version(int32_t value);
  private:
  int32_t _internal_build_version() const;
  void _internal_set_build_version(int32_t value);
  public:

  // optional int64 start_time = 15;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  int64_t start_time() const;
  void set_start_time(int64_t value);
  private:
  int64_t _internal_start_time() const;
  void _internal_set_start_time(int64_t value);
  public:

  // optional int32 instance = 13;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  int32_t instance() const;
  void set_instance(int32_t value);
  private:
  int32_t _internal_instance() const;
  void _internal_set_instance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CUserMessage_Inventory_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail > inventories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail > inventories2_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail > inventories3_;
    uint32_t crc_;
    int32_t item_count_;
    int32_t osversion_;
    int32_t perf_time_;
    int32_t client_timestamp_;
    int32_t platform_;
    int32_t inv_type_;
    int32_t build_version_;
    int64_t start_time_;
    int32_t instance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobufs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgVector

// optional float x = 1;
inline bool CMsgVector::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVector::has_x() const {
  return _internal_has_x();
}
inline void CMsgVector::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgVector::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgVector::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector.x)
  return _internal_x();
}
inline void CMsgVector::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CMsgVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgVector.x)
}

// optional float y = 2;
inline bool CMsgVector::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVector::has_y() const {
  return _internal_has_y();
}
inline void CMsgVector::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgVector::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgVector::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector.y)
  return _internal_y();
}
inline void CMsgVector::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CMsgVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgVector.y)
}

// optional float z = 3;
inline bool CMsgVector::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVector::has_z() const {
  return _internal_has_z();
}
inline void CMsgVector::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgVector::_internal_z() const {
  return _impl_.z_;
}
inline float CMsgVector::z() const {
  // @@protoc_insertion_point(field_get:CMsgVector.z)
  return _internal_z();
}
inline void CMsgVector::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void CMsgVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgVector.z)
}

// optional float w = 4;
inline bool CMsgVector::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVector::has_w() const {
  return _internal_has_w();
}
inline void CMsgVector::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgVector::_internal_w() const {
  return _impl_.w_;
}
inline float CMsgVector::w() const {
  // @@protoc_insertion_point(field_get:CMsgVector.w)
  return _internal_w();
}
inline void CMsgVector::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.w_ = value;
}
inline void CMsgVector::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:CMsgVector.w)
}

// -------------------------------------------------------------------

// CMsgQAngle

// optional float x = 1;
inline bool CMsgQAngle::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQAngle::has_x() const {
  return _internal_has_x();
}
inline void CMsgQAngle::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgQAngle::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgQAngle::x() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.x)
  return _internal_x();
}
inline void CMsgQAngle::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CMsgQAngle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.x)
}

// optional float y = 2;
inline bool CMsgQAngle::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQAngle::has_y() const {
  return _internal_has_y();
}
inline void CMsgQAngle::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgQAngle::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgQAngle::y() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.y)
  return _internal_y();
}
inline void CMsgQAngle::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CMsgQAngle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.y)
}

// optional float z = 3;
inline bool CMsgQAngle::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQAngle::has_z() const {
  return _internal_has_z();
}
inline void CMsgQAngle::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgQAngle::_internal_z() const {
  return _impl_.z_;
}
inline float CMsgQAngle::z() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.z)
  return _internal_z();
}
inline void CMsgQAngle::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void CMsgQAngle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.z)
}

// -------------------------------------------------------------------

// CInButtonStatePB

// optional uint64 buttonstate1 = 1;
inline bool CInButtonStatePB::_internal_has_buttonstate1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CInButtonStatePB::has_buttonstate1() const {
  return _internal_has_buttonstate1();
}
inline void CInButtonStatePB::clear_buttonstate1() {
  _impl_.buttonstate1_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CInButtonStatePB::_internal_buttonstate1() const {
  return _impl_.buttonstate1_;
}
inline uint64_t CInButtonStatePB::buttonstate1() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate1)
  return _internal_buttonstate1();
}
inline void CInButtonStatePB::_internal_set_buttonstate1(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buttonstate1_ = value;
}
inline void CInButtonStatePB::set_buttonstate1(uint64_t value) {
  _internal_set_buttonstate1(value);
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate1)
}

// optional uint64 buttonstate2 = 2;
inline bool CInButtonStatePB::_internal_has_buttonstate2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CInButtonStatePB::has_buttonstate2() const {
  return _internal_has_buttonstate2();
}
inline void CInButtonStatePB::clear_buttonstate2() {
  _impl_.buttonstate2_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CInButtonStatePB::_internal_buttonstate2() const {
  return _impl_.buttonstate2_;
}
inline uint64_t CInButtonStatePB::buttonstate2() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate2)
  return _internal_buttonstate2();
}
inline void CInButtonStatePB::_internal_set_buttonstate2(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buttonstate2_ = value;
}
inline void CInButtonStatePB::set_buttonstate2(uint64_t value) {
  _internal_set_buttonstate2(value);
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate2)
}

// optional uint64 buttonstate3 = 3;
inline bool CInButtonStatePB::_internal_has_buttonstate3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CInButtonStatePB::has_buttonstate3() const {
  return _internal_has_buttonstate3();
}
inline void CInButtonStatePB::clear_buttonstate3() {
  _impl_.buttonstate3_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CInButtonStatePB::_internal_buttonstate3() const {
  return _impl_.buttonstate3_;
}
inline uint64_t CInButtonStatePB::buttonstate3() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate3)
  return _internal_buttonstate3();
}
inline void CInButtonStatePB::_internal_set_buttonstate3(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.buttonstate3_ = value;
}
inline void CInButtonStatePB::set_buttonstate3(uint64_t value) {
  _internal_set_buttonstate3(value);
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate3)
}

// -------------------------------------------------------------------

// CSubtickMoveStep

// optional uint64 button = 1;
inline bool CSubtickMoveStep::_internal_has_button() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSubtickMoveStep::has_button() const {
  return _internal_has_button();
}
inline void CSubtickMoveStep::clear_button() {
  _impl_.button_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CSubtickMoveStep::_internal_button() const {
  return _impl_.button_;
}
inline uint64_t CSubtickMoveStep::button() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.button)
  return _internal_button();
}
inline void CSubtickMoveStep::_internal_set_button(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.button_ = value;
}
inline void CSubtickMoveStep::set_button(uint64_t value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.button)
}

// optional bool pressed = 2;
inline bool CSubtickMoveStep::_internal_has_pressed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSubtickMoveStep::has_pressed() const {
  return _internal_has_pressed();
}
inline void CSubtickMoveStep::clear_pressed() {
  _impl_.pressed_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CSubtickMoveStep::_internal_pressed() const {
  return _impl_.pressed_;
}
inline bool CSubtickMoveStep::pressed() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.pressed)
  return _internal_pressed();
}
inline void CSubtickMoveStep::_internal_set_pressed(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pressed_ = value;
}
inline void CSubtickMoveStep::set_pressed(bool value) {
  _internal_set_pressed(value);
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.pressed)
}

// optional float when = 3;
inline bool CSubtickMoveStep::_internal_has_when() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSubtickMoveStep::has_when() const {
  return _internal_has_when();
}
inline void CSubtickMoveStep::clear_when() {
  _impl_.when_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CSubtickMoveStep::_internal_when() const {
  return _impl_.when_;
}
inline float CSubtickMoveStep::when() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.when)
  return _internal_when();
}
inline void CSubtickMoveStep::_internal_set_when(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.when_ = value;
}
inline void CSubtickMoveStep::set_when(float value) {
  _internal_set_when(value);
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.when)
}

// -------------------------------------------------------------------

// CBaseUserCmdPB

// optional int32 command_number = 1;
inline bool CBaseUserCmdPB::_internal_has_command_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_command_number() const {
  return _internal_has_command_number();
}
inline void CBaseUserCmdPB::clear_command_number() {
  _impl_.command_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBaseUserCmdPB::_internal_command_number() const {
  return _impl_.command_number_;
}
inline int32_t CBaseUserCmdPB::command_number() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.command_number)
  return _internal_command_number();
}
inline void CBaseUserCmdPB::_internal_set_command_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.command_number_ = value;
}
inline void CBaseUserCmdPB::set_command_number(int32_t value) {
  _internal_set_command_number(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.command_number)
}

// optional int32 tick_count = 2;
inline bool CBaseUserCmdPB::_internal_has_tick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_tick_count() const {
  return _internal_has_tick_count();
}
inline void CBaseUserCmdPB::clear_tick_count() {
  _impl_.tick_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CBaseUserCmdPB::_internal_tick_count() const {
  return _impl_.tick_count_;
}
inline int32_t CBaseUserCmdPB::tick_count() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.tick_count)
  return _internal_tick_count();
}
inline void CBaseUserCmdPB::_internal_set_tick_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tick_count_ = value;
}
inline void CBaseUserCmdPB::set_tick_count(int32_t value) {
  _internal_set_tick_count(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.tick_count)
}

// optional .CInButtonStatePB buttons_pb = 3;
inline bool CBaseUserCmdPB::_internal_has_buttons_pb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buttons_pb_ != nullptr);
  return value;
}
inline bool CBaseUserCmdPB::has_buttons_pb() const {
  return _internal_has_buttons_pb();
}
inline void CBaseUserCmdPB::clear_buttons_pb() {
  if (_impl_.buttons_pb_ != nullptr) _impl_.buttons_pb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CInButtonStatePB& CBaseUserCmdPB::_internal_buttons_pb() const {
  const ::CInButtonStatePB* p = _impl_.buttons_pb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CInButtonStatePB&>(
      ::_CInButtonStatePB_default_instance_);
}
inline const ::CInButtonStatePB& CBaseUserCmdPB::buttons_pb() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.buttons_pb)
  return _internal_buttons_pb();
}
inline void CBaseUserCmdPB::unsafe_arena_set_allocated_buttons_pb(
    ::CInButtonStatePB* buttons_pb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buttons_pb_);
  }
  _impl_.buttons_pb_ = buttons_pb;
  if (buttons_pb) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBaseUserCmdPB.buttons_pb)
}
inline ::CInButtonStatePB* CBaseUserCmdPB::release_buttons_pb() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CInButtonStatePB* temp = _impl_.buttons_pb_;
  _impl_.buttons_pb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::unsafe_arena_release_buttons_pb() {
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.buttons_pb)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CInButtonStatePB* temp = _impl_.buttons_pb_;
  _impl_.buttons_pb_ = nullptr;
  return temp;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::_internal_mutable_buttons_pb() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.buttons_pb_ == nullptr) {
    auto* p = CreateMaybeMessage<::CInButtonStatePB>(GetArenaForAllocation());
    _impl_.buttons_pb_ = p;
  }
  return _impl_.buttons_pb_;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::mutable_buttons_pb() {
  ::CInButtonStatePB* _msg = _internal_mutable_buttons_pb();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.buttons_pb)
  return _msg;
}
inline void CBaseUserCmdPB::set_allocated_buttons_pb(::CInButtonStatePB* buttons_pb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buttons_pb_;
  }
  if (buttons_pb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buttons_pb);
    if (message_arena != submessage_arena) {
      buttons_pb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttons_pb, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.buttons_pb_ = buttons_pb;
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.buttons_pb)
}

// optional .CMsgQAngle viewangles = 4;
inline bool CBaseUserCmdPB::_internal_has_viewangles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewangles_ != nullptr);
  return value;
}
inline bool CBaseUserCmdPB::has_viewangles() const {
  return _internal_has_viewangles();
}
inline void CBaseUserCmdPB::clear_viewangles() {
  if (_impl_.viewangles_ != nullptr) _impl_.viewangles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgQAngle& CBaseUserCmdPB::_internal_viewangles() const {
  const ::CMsgQAngle* p = _impl_.viewangles_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CBaseUserCmdPB::viewangles() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.viewangles)
  return _internal_viewangles();
}
inline void CBaseUserCmdPB::unsafe_arena_set_allocated_viewangles(
    ::CMsgQAngle* viewangles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewangles_);
  }
  _impl_.viewangles_ = viewangles;
  if (viewangles) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBaseUserCmdPB.viewangles)
}
inline ::CMsgQAngle* CBaseUserCmdPB::release_viewangles() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgQAngle* temp = _impl_.viewangles_;
  _impl_.viewangles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CBaseUserCmdPB::unsafe_arena_release_viewangles() {
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.viewangles)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgQAngle* temp = _impl_.viewangles_;
  _impl_.viewangles_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CBaseUserCmdPB::_internal_mutable_viewangles() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.viewangles_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    _impl_.viewangles_ = p;
  }
  return _impl_.viewangles_;
}
inline ::CMsgQAngle* CBaseUserCmdPB::mutable_viewangles() {
  ::CMsgQAngle* _msg = _internal_mutable_viewangles();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.viewangles)
  return _msg;
}
inline void CBaseUserCmdPB::set_allocated_viewangles(::CMsgQAngle* viewangles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.viewangles_;
  }
  if (viewangles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(viewangles);
    if (message_arena != submessage_arena) {
      viewangles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewangles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.viewangles_ = viewangles;
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.viewangles)
}

// optional float forwardmove = 5;
inline bool CBaseUserCmdPB::_internal_has_forwardmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_forwardmove() const {
  return _internal_has_forwardmove();
}
inline void CBaseUserCmdPB::clear_forwardmove() {
  _impl_.forwardmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CBaseUserCmdPB::_internal_forwardmove() const {
  return _impl_.forwardmove_;
}
inline float CBaseUserCmdPB::forwardmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.forwardmove)
  return _internal_forwardmove();
}
inline void CBaseUserCmdPB::_internal_set_forwardmove(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.forwardmove_ = value;
}
inline void CBaseUserCmdPB::set_forwardmove(float value) {
  _internal_set_forwardmove(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.forwardmove)
}

// optional float leftmove = 6;
inline bool CBaseUserCmdPB::_internal_has_leftmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_leftmove() const {
  return _internal_has_leftmove();
}
inline void CBaseUserCmdPB::clear_leftmove() {
  _impl_.leftmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CBaseUserCmdPB::_internal_leftmove() const {
  return _impl_.leftmove_;
}
inline float CBaseUserCmdPB::leftmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.leftmove)
  return _internal_leftmove();
}
inline void CBaseUserCmdPB::_internal_set_leftmove(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.leftmove_ = value;
}
inline void CBaseUserCmdPB::set_leftmove(float value) {
  _internal_set_leftmove(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.leftmove)
}

// optional float upmove = 7;
inline bool CBaseUserCmdPB::_internal_has_upmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_upmove() const {
  return _internal_has_upmove();
}
inline void CBaseUserCmdPB::clear_upmove() {
  _impl_.upmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CBaseUserCmdPB::_internal_upmove() const {
  return _impl_.upmove_;
}
inline float CBaseUserCmdPB::upmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.upmove)
  return _internal_upmove();
}
inline void CBaseUserCmdPB::_internal_set_upmove(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.upmove_ = value;
}
inline void CBaseUserCmdPB::set_upmove(float value) {
  _internal_set_upmove(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.upmove)
}

// optional int32 impulse = 8;
inline bool CBaseUserCmdPB::_internal_has_impulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_impulse() const {
  return _internal_has_impulse();
}
inline void CBaseUserCmdPB::clear_impulse() {
  _impl_.impulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CBaseUserCmdPB::_internal_impulse() const {
  return _impl_.impulse_;
}
inline int32_t CBaseUserCmdPB::impulse() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.impulse)
  return _internal_impulse();
}
inline void CBaseUserCmdPB::_internal_set_impulse(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.impulse_ = value;
}
inline void CBaseUserCmdPB::set_impulse(int32_t value) {
  _internal_set_impulse(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.impulse)
}

// optional int32 weaponselect = 9;
inline bool CBaseUserCmdPB::_internal_has_weaponselect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_weaponselect() const {
  return _internal_has_weaponselect();
}
inline void CBaseUserCmdPB::clear_weaponselect() {
  _impl_.weaponselect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CBaseUserCmdPB::_internal_weaponselect() const {
  return _impl_.weaponselect_;
}
inline int32_t CBaseUserCmdPB::weaponselect() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.weaponselect)
  return _internal_weaponselect();
}
inline void CBaseUserCmdPB::_internal_set_weaponselect(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.weaponselect_ = value;
}
inline void CBaseUserCmdPB::set_weaponselect(int32_t value) {
  _internal_set_weaponselect(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.weaponselect)
}

// optional int32 random_seed = 10;
inline bool CBaseUserCmdPB::_internal_has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void CBaseUserCmdPB::clear_random_seed() {
  _impl_.random_seed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CBaseUserCmdPB::_internal_random_seed() const {
  return _impl_.random_seed_;
}
inline int32_t CBaseUserCmdPB::random_seed() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.random_seed)
  return _internal_random_seed();
}
inline void CBaseUserCmdPB::_internal_set_random_seed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.random_seed_ = value;
}
inline void CBaseUserCmdPB::set_random_seed(int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.random_seed)
}

// optional int32 mousedx = 11;
inline bool CBaseUserCmdPB::_internal_has_mousedx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_mousedx() const {
  return _internal_has_mousedx();
}
inline void CBaseUserCmdPB::clear_mousedx() {
  _impl_.mousedx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CBaseUserCmdPB::_internal_mousedx() const {
  return _impl_.mousedx_;
}
inline int32_t CBaseUserCmdPB::mousedx() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.mousedx)
  return _internal_mousedx();
}
inline void CBaseUserCmdPB::_internal_set_mousedx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mousedx_ = value;
}
inline void CBaseUserCmdPB::set_mousedx(int32_t value) {
  _internal_set_mousedx(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.mousedx)
}

// optional int32 mousedy = 12;
inline bool CBaseUserCmdPB::_internal_has_mousedy() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_mousedy() const {
  return _internal_has_mousedy();
}
inline void CBaseUserCmdPB::clear_mousedy() {
  _impl_.mousedy_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CBaseUserCmdPB::_internal_mousedy() const {
  return _impl_.mousedy_;
}
inline int32_t CBaseUserCmdPB::mousedy() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.mousedy)
  return _internal_mousedy();
}
inline void CBaseUserCmdPB::_internal_set_mousedy(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.mousedy_ = value;
}
inline void CBaseUserCmdPB::set_mousedy(int32_t value) {
  _internal_set_mousedy(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.mousedy)
}

// optional uint32 pawn_entity_handle = 14 [default = 16777215];
inline bool CBaseUserCmdPB::_internal_has_pawn_entity_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_pawn_entity_handle() const {
  return _internal_has_pawn_entity_handle();
}
inline void CBaseUserCmdPB::clear_pawn_entity_handle() {
  _impl_.pawn_entity_handle_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CBaseUserCmdPB::_internal_pawn_entity_handle() const {
  return _impl_.pawn_entity_handle_;
}
inline uint32_t CBaseUserCmdPB::pawn_entity_handle() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.pawn_entity_handle)
  return _internal_pawn_entity_handle();
}
inline void CBaseUserCmdPB::_internal_set_pawn_entity_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.pawn_entity_handle_ = value;
}
inline void CBaseUserCmdPB::set_pawn_entity_handle(uint32_t value) {
  _internal_set_pawn_entity_handle(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.pawn_entity_handle)
}

// repeated .CSubtickMoveStep subtick_moves = 18;
inline int CBaseUserCmdPB::_internal_subtick_moves_size() const {
  return _impl_.subtick_moves_.size();
}
inline int CBaseUserCmdPB::subtick_moves_size() const {
  return _internal_subtick_moves_size();
}
inline void CBaseUserCmdPB::clear_subtick_moves() {
  _impl_.subtick_moves_.Clear();
}
inline ::CSubtickMoveStep* CBaseUserCmdPB::mutable_subtick_moves(int index) {
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.subtick_moves)
  return _impl_.subtick_moves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSubtickMoveStep >*
CBaseUserCmdPB::mutable_subtick_moves() {
  // @@protoc_insertion_point(field_mutable_list:CBaseUserCmdPB.subtick_moves)
  return &_impl_.subtick_moves_;
}
inline const ::CSubtickMoveStep& CBaseUserCmdPB::_internal_subtick_moves(int index) const {
  return _impl_.subtick_moves_.Get(index);
}
inline const ::CSubtickMoveStep& CBaseUserCmdPB::subtick_moves(int index) const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.subtick_moves)
  return _internal_subtick_moves(index);
}
inline ::CSubtickMoveStep* CBaseUserCmdPB::_internal_add_subtick_moves() {
  return _impl_.subtick_moves_.Add();
}
inline ::CSubtickMoveStep* CBaseUserCmdPB::add_subtick_moves() {
  ::CSubtickMoveStep* _add = _internal_add_subtick_moves();
  // @@protoc_insertion_point(field_add:CBaseUserCmdPB.subtick_moves)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSubtickMoveStep >&
CBaseUserCmdPB::subtick_moves() const {
  // @@protoc_insertion_point(field_list:CBaseUserCmdPB.subtick_moves)
  return _impl_.subtick_moves_;
}

// optional bytes move_crc = 19;
inline bool CBaseUserCmdPB::_internal_has_move_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_move_crc() const {
  return _internal_has_move_crc();
}
inline void CBaseUserCmdPB::clear_move_crc() {
  _impl_.move_crc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBaseUserCmdPB::move_crc() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.move_crc)
  return _internal_move_crc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBaseUserCmdPB::set_move_crc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.move_crc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.move_crc)
}
inline std::string* CBaseUserCmdPB::mutable_move_crc() {
  std::string* _s = _internal_mutable_move_crc();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.move_crc)
  return _s;
}
inline const std::string& CBaseUserCmdPB::_internal_move_crc() const {
  return _impl_.move_crc_.Get();
}
inline void CBaseUserCmdPB::_internal_set_move_crc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.move_crc_.Set(value, GetArenaForAllocation());
}
inline std::string* CBaseUserCmdPB::_internal_mutable_move_crc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.move_crc_.Mutable(GetArenaForAllocation());
}
inline std::string* CBaseUserCmdPB::release_move_crc() {
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.move_crc)
  if (!_internal_has_move_crc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.move_crc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.move_crc_.IsDefault()) {
    _impl_.move_crc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBaseUserCmdPB::set_allocated_move_crc(std::string* move_crc) {
  if (move_crc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.move_crc_.SetAllocated(move_crc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.move_crc_.IsDefault()) {
    _impl_.move_crc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.move_crc)
}

// optional uint32 consumed_server_angle_changes = 20;
inline bool CBaseUserCmdPB::_internal_has_consumed_server_angle_changes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_consumed_server_angle_changes() const {
  return _internal_has_consumed_server_angle_changes();
}
inline void CBaseUserCmdPB::clear_consumed_server_angle_changes() {
  _impl_.consumed_server_angle_changes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CBaseUserCmdPB::_internal_consumed_server_angle_changes() const {
  return _impl_.consumed_server_angle_changes_;
}
inline uint32_t CBaseUserCmdPB::consumed_server_angle_changes() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.consumed_server_angle_changes)
  return _internal_consumed_server_angle_changes();
}
inline void CBaseUserCmdPB::_internal_set_consumed_server_angle_changes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.consumed_server_angle_changes_ = value;
}
inline void CBaseUserCmdPB::set_consumed_server_angle_changes(uint32_t value) {
  _internal_set_consumed_server_angle_changes(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.consumed_server_angle_changes)
}

// optional int32 cmd_flags = 21;
inline bool CBaseUserCmdPB::_internal_has_cmd_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CBaseUserCmdPB::has_cmd_flags() const {
  return _internal_has_cmd_flags();
}
inline void CBaseUserCmdPB::clear_cmd_flags() {
  _impl_.cmd_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CBaseUserCmdPB::_internal_cmd_flags() const {
  return _impl_.cmd_flags_;
}
inline int32_t CBaseUserCmdPB::cmd_flags() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.cmd_flags)
  return _internal_cmd_flags();
}
inline void CBaseUserCmdPB::_internal_set_cmd_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.cmd_flags_ = value;
}
inline void CBaseUserCmdPB::set_cmd_flags(int32_t value) {
  _internal_set_cmd_flags(value);
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.cmd_flags)
}

// -------------------------------------------------------------------

// CSGOInterpolationInfoPB

// optional int32 src_tick = 1 [default = -1];
inline bool CSGOInterpolationInfoPB::_internal_has_src_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSGOInterpolationInfoPB::has_src_tick() const {
  return _internal_has_src_tick();
}
inline void CSGOInterpolationInfoPB::clear_src_tick() {
  _impl_.src_tick_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CSGOInterpolationInfoPB::_internal_src_tick() const {
  return _impl_.src_tick_;
}
inline int32_t CSGOInterpolationInfoPB::src_tick() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.src_tick)
  return _internal_src_tick();
}
inline void CSGOInterpolationInfoPB::_internal_set_src_tick(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.src_tick_ = value;
}
inline void CSGOInterpolationInfoPB::set_src_tick(int32_t value) {
  _internal_set_src_tick(value);
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.src_tick)
}

// optional int32 dst_tick = 2 [default = -1];
inline bool CSGOInterpolationInfoPB::_internal_has_dst_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSGOInterpolationInfoPB::has_dst_tick() const {
  return _internal_has_dst_tick();
}
inline void CSGOInterpolationInfoPB::clear_dst_tick() {
  _impl_.dst_tick_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CSGOInterpolationInfoPB::_internal_dst_tick() const {
  return _impl_.dst_tick_;
}
inline int32_t CSGOInterpolationInfoPB::dst_tick() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.dst_tick)
  return _internal_dst_tick();
}
inline void CSGOInterpolationInfoPB::_internal_set_dst_tick(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dst_tick_ = value;
}
inline void CSGOInterpolationInfoPB::set_dst_tick(int32_t value) {
  _internal_set_dst_tick(value);
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.dst_tick)
}

// optional float frac = 3 [default = 0];
inline bool CSGOInterpolationInfoPB::_internal_has_frac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSGOInterpolationInfoPB::has_frac() const {
  return _internal_has_frac();
}
inline void CSGOInterpolationInfoPB::clear_frac() {
  _impl_.frac_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CSGOInterpolationInfoPB::_internal_frac() const {
  return _impl_.frac_;
}
inline float CSGOInterpolationInfoPB::frac() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.frac)
  return _internal_frac();
}
inline void CSGOInterpolationInfoPB::_internal_set_frac(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frac_ = value;
}
inline void CSGOInterpolationInfoPB::set_frac(float value) {
  _internal_set_frac(value);
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.frac)
}

// -------------------------------------------------------------------

// CSGOInputHistoryEntryPB

// optional .CMsgQAngle view_angles = 2;
inline bool CSGOInputHistoryEntryPB::_internal_has_view_angles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_angles_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_view_angles() const {
  return _internal_has_view_angles();
}
inline void CSGOInputHistoryEntryPB::clear_view_angles() {
  if (_impl_.view_angles_ != nullptr) _impl_.view_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::_internal_view_angles() const {
  const ::CMsgQAngle* p = _impl_.view_angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::view_angles() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.view_angles)
  return _internal_view_angles();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_view_angles(
    ::CMsgQAngle* view_angles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_angles_);
  }
  _impl_.view_angles_ = view_angles;
  if (view_angles) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.view_angles)
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::release_view_angles() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = _impl_.view_angles_;
  _impl_.view_angles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::unsafe_arena_release_view_angles() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.view_angles)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = _impl_.view_angles_;
  _impl_.view_angles_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::_internal_mutable_view_angles() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.view_angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    _impl_.view_angles_ = p;
  }
  return _impl_.view_angles_;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::mutable_view_angles() {
  ::CMsgQAngle* _msg = _internal_mutable_view_angles();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.view_angles)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_view_angles(::CMsgQAngle* view_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.view_angles_;
  }
  if (view_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view_angles);
    if (message_arena != submessage_arena) {
      view_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_angles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.view_angles_ = view_angles;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.view_angles)
}

// optional int32 render_tick_count = 4;
inline bool CSGOInputHistoryEntryPB::_internal_has_render_tick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_render_tick_count() const {
  return _internal_has_render_tick_count();
}
inline void CSGOInputHistoryEntryPB::clear_render_tick_count() {
  _impl_.render_tick_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CSGOInputHistoryEntryPB::_internal_render_tick_count() const {
  return _impl_.render_tick_count_;
}
inline int32_t CSGOInputHistoryEntryPB::render_tick_count() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.render_tick_count)
  return _internal_render_tick_count();
}
inline void CSGOInputHistoryEntryPB::_internal_set_render_tick_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.render_tick_count_ = value;
}
inline void CSGOInputHistoryEntryPB::set_render_tick_count(int32_t value) {
  _internal_set_render_tick_count(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.render_tick_count)
}

// optional float render_tick_fraction = 5;
inline bool CSGOInputHistoryEntryPB::_internal_has_render_tick_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_render_tick_fraction() const {
  return _internal_has_render_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::clear_render_tick_fraction() {
  _impl_.render_tick_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CSGOInputHistoryEntryPB::_internal_render_tick_fraction() const {
  return _impl_.render_tick_fraction_;
}
inline float CSGOInputHistoryEntryPB::render_tick_fraction() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.render_tick_fraction)
  return _internal_render_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::_internal_set_render_tick_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.render_tick_fraction_ = value;
}
inline void CSGOInputHistoryEntryPB::set_render_tick_fraction(float value) {
  _internal_set_render_tick_fraction(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.render_tick_fraction)
}

// optional int32 player_tick_count = 6;
inline bool CSGOInputHistoryEntryPB::_internal_has_player_tick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_player_tick_count() const {
  return _internal_has_player_tick_count();
}
inline void CSGOInputHistoryEntryPB::clear_player_tick_count() {
  _impl_.player_tick_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CSGOInputHistoryEntryPB::_internal_player_tick_count() const {
  return _impl_.player_tick_count_;
}
inline int32_t CSGOInputHistoryEntryPB::player_tick_count() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_tick_count)
  return _internal_player_tick_count();
}
inline void CSGOInputHistoryEntryPB::_internal_set_player_tick_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.player_tick_count_ = value;
}
inline void CSGOInputHistoryEntryPB::set_player_tick_count(int32_t value) {
  _internal_set_player_tick_count(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.player_tick_count)
}

// optional float player_tick_fraction = 7;
inline bool CSGOInputHistoryEntryPB::_internal_has_player_tick_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_player_tick_fraction() const {
  return _internal_has_player_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::clear_player_tick_fraction() {
  _impl_.player_tick_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CSGOInputHistoryEntryPB::_internal_player_tick_fraction() const {
  return _impl_.player_tick_fraction_;
}
inline float CSGOInputHistoryEntryPB::player_tick_fraction() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_tick_fraction)
  return _internal_player_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::_internal_set_player_tick_fraction(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.player_tick_fraction_ = value;
}
inline void CSGOInputHistoryEntryPB::set_player_tick_fraction(float value) {
  _internal_set_player_tick_fraction(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.player_tick_fraction)
}

// optional .CSGOInterpolationInfoPB cl_interp = 12;
inline bool CSGOInputHistoryEntryPB::_internal_has_cl_interp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cl_interp_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_cl_interp() const {
  return _internal_has_cl_interp();
}
inline void CSGOInputHistoryEntryPB::clear_cl_interp() {
  if (_impl_.cl_interp_ != nullptr) _impl_.cl_interp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_cl_interp() const {
  const ::CSGOInterpolationInfoPB* p = _impl_.cl_interp_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(
      ::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::cl_interp() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.cl_interp)
  return _internal_cl_interp();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_cl_interp(
    ::CSGOInterpolationInfoPB* cl_interp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cl_interp_);
  }
  _impl_.cl_interp_ = cl_interp;
  if (cl_interp) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.cl_interp)
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::release_cl_interp() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CSGOInterpolationInfoPB* temp = _impl_.cl_interp_;
  _impl_.cl_interp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::unsafe_arena_release_cl_interp() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.cl_interp)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CSGOInterpolationInfoPB* temp = _impl_.cl_interp_;
  _impl_.cl_interp_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::_internal_mutable_cl_interp() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cl_interp_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSGOInterpolationInfoPB>(GetArenaForAllocation());
    _impl_.cl_interp_ = p;
  }
  return _impl_.cl_interp_;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::mutable_cl_interp() {
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_cl_interp();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.cl_interp)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_cl_interp(::CSGOInterpolationInfoPB* cl_interp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cl_interp_;
  }
  if (cl_interp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cl_interp);
    if (message_arena != submessage_arena) {
      cl_interp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cl_interp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cl_interp_ = cl_interp;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.cl_interp)
}

// optional .CSGOInterpolationInfoPB sv_interp0 = 13;
inline bool CSGOInputHistoryEntryPB::_internal_has_sv_interp0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sv_interp0_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_sv_interp0() const {
  return _internal_has_sv_interp0();
}
inline void CSGOInputHistoryEntryPB::clear_sv_interp0() {
  if (_impl_.sv_interp0_ != nullptr) _impl_.sv_interp0_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_sv_interp0() const {
  const ::CSGOInterpolationInfoPB* p = _impl_.sv_interp0_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(
      ::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::sv_interp0() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.sv_interp0)
  return _internal_sv_interp0();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_sv_interp0(
    ::CSGOInterpolationInfoPB* sv_interp0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sv_interp0_);
  }
  _impl_.sv_interp0_ = sv_interp0;
  if (sv_interp0) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.sv_interp0)
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::release_sv_interp0() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp0_;
  _impl_.sv_interp0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::unsafe_arena_release_sv_interp0() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.sv_interp0)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp0_;
  _impl_.sv_interp0_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::_internal_mutable_sv_interp0() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.sv_interp0_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSGOInterpolationInfoPB>(GetArenaForAllocation());
    _impl_.sv_interp0_ = p;
  }
  return _impl_.sv_interp0_;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::mutable_sv_interp0() {
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_sv_interp0();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.sv_interp0)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_sv_interp0(::CSGOInterpolationInfoPB* sv_interp0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sv_interp0_;
  }
  if (sv_interp0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sv_interp0);
    if (message_arena != submessage_arena) {
      sv_interp0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sv_interp0, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.sv_interp0_ = sv_interp0;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.sv_interp0)
}

// optional .CSGOInterpolationInfoPB sv_interp1 = 14;
inline bool CSGOInputHistoryEntryPB::_internal_has_sv_interp1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sv_interp1_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_sv_interp1() const {
  return _internal_has_sv_interp1();
}
inline void CSGOInputHistoryEntryPB::clear_sv_interp1() {
  if (_impl_.sv_interp1_ != nullptr) _impl_.sv_interp1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_sv_interp1() const {
  const ::CSGOInterpolationInfoPB* p = _impl_.sv_interp1_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(
      ::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::sv_interp1() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.sv_interp1)
  return _internal_sv_interp1();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_sv_interp1(
    ::CSGOInterpolationInfoPB* sv_interp1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sv_interp1_);
  }
  _impl_.sv_interp1_ = sv_interp1;
  if (sv_interp1) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.sv_interp1)
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::release_sv_interp1() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp1_;
  _impl_.sv_interp1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::unsafe_arena_release_sv_interp1() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.sv_interp1)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp1_;
  _impl_.sv_interp1_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::_internal_mutable_sv_interp1() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.sv_interp1_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSGOInterpolationInfoPB>(GetArenaForAllocation());
    _impl_.sv_interp1_ = p;
  }
  return _impl_.sv_interp1_;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::mutable_sv_interp1() {
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_sv_interp1();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.sv_interp1)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_sv_interp1(::CSGOInterpolationInfoPB* sv_interp1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sv_interp1_;
  }
  if (sv_interp1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sv_interp1);
    if (message_arena != submessage_arena) {
      sv_interp1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sv_interp1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.sv_interp1_ = sv_interp1;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.sv_interp1)
}

// optional .CSGOInterpolationInfoPB player_interp = 15;
inline bool CSGOInputHistoryEntryPB::_internal_has_player_interp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_interp_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_player_interp() const {
  return _internal_has_player_interp();
}
inline void CSGOInputHistoryEntryPB::clear_player_interp() {
  if (_impl_.player_interp_ != nullptr) _impl_.player_interp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_player_interp() const {
  const ::CSGOInterpolationInfoPB* p = _impl_.player_interp_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(
      ::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::player_interp() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_interp)
  return _internal_player_interp();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_player_interp(
    ::CSGOInterpolationInfoPB* player_interp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_interp_);
  }
  _impl_.player_interp_ = player_interp;
  if (player_interp) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.player_interp)
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::release_player_interp() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CSGOInterpolationInfoPB* temp = _impl_.player_interp_;
  _impl_.player_interp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::unsafe_arena_release_player_interp() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.player_interp)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CSGOInterpolationInfoPB* temp = _impl_.player_interp_;
  _impl_.player_interp_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::_internal_mutable_player_interp() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.player_interp_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSGOInterpolationInfoPB>(GetArenaForAllocation());
    _impl_.player_interp_ = p;
  }
  return _impl_.player_interp_;
}
inline ::CSGOInterpolationInfoPB* CSGOInputHistoryEntryPB::mutable_player_interp() {
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_player_interp();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.player_interp)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_player_interp(::CSGOInterpolationInfoPB* player_interp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_interp_;
  }
  if (player_interp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_interp);
    if (message_arena != submessage_arena) {
      player_interp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_interp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.player_interp_ = player_interp;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.player_interp)
}

// optional int32 frame_number = 20;
inline bool CSGOInputHistoryEntryPB::_internal_has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void CSGOInputHistoryEntryPB::clear_frame_number() {
  _impl_.frame_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CSGOInputHistoryEntryPB::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline int32_t CSGOInputHistoryEntryPB::frame_number() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.frame_number)
  return _internal_frame_number();
}
inline void CSGOInputHistoryEntryPB::_internal_set_frame_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.frame_number_ = value;
}
inline void CSGOInputHistoryEntryPB::set_frame_number(int32_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.frame_number)
}

// optional int32 target_ent_index = 8 [default = -1];
inline bool CSGOInputHistoryEntryPB::_internal_has_target_ent_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_target_ent_index() const {
  return _internal_has_target_ent_index();
}
inline void CSGOInputHistoryEntryPB::clear_target_ent_index() {
  _impl_.target_ent_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CSGOInputHistoryEntryPB::_internal_target_ent_index() const {
  return _impl_.target_ent_index_;
}
inline int32_t CSGOInputHistoryEntryPB::target_ent_index() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_ent_index)
  return _internal_target_ent_index();
}
inline void CSGOInputHistoryEntryPB::_internal_set_target_ent_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.target_ent_index_ = value;
}
inline void CSGOInputHistoryEntryPB::set_target_ent_index(int32_t value) {
  _internal_set_target_ent_index(value);
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.target_ent_index)
}

// optional .CMsgVector shoot_position = 3;
inline bool CSGOInputHistoryEntryPB::_internal_has_shoot_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shoot_position_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_shoot_position() const {
  return _internal_has_shoot_position();
}
inline void CSGOInputHistoryEntryPB::clear_shoot_position() {
  if (_impl_.shoot_position_ != nullptr) _impl_.shoot_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_shoot_position() const {
  const ::CMsgVector* p = _impl_.shoot_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::shoot_position() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.shoot_position)
  return _internal_shoot_position();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_shoot_position(
    ::CMsgVector* shoot_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shoot_position_);
  }
  _impl_.shoot_position_ = shoot_position;
  if (shoot_position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.shoot_position)
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::release_shoot_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.shoot_position_;
  _impl_.shoot_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::unsafe_arena_release_shoot_position() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.shoot_position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgVector* temp = _impl_.shoot_position_;
  _impl_.shoot_position_ = nullptr;
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::_internal_mutable_shoot_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shoot_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.shoot_position_ = p;
  }
  return _impl_.shoot_position_;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::mutable_shoot_position() {
  ::CMsgVector* _msg = _internal_mutable_shoot_position();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.shoot_position)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_shoot_position(::CMsgVector* shoot_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shoot_position_;
  }
  if (shoot_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shoot_position);
    if (message_arena != submessage_arena) {
      shoot_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shoot_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shoot_position_ = shoot_position;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.shoot_position)
}

// optional .CMsgVector target_head_pos_check = 9;
inline bool CSGOInputHistoryEntryPB::_internal_has_target_head_pos_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_head_pos_check_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_target_head_pos_check() const {
  return _internal_has_target_head_pos_check();
}
inline void CSGOInputHistoryEntryPB::clear_target_head_pos_check() {
  if (_impl_.target_head_pos_check_ != nullptr) _impl_.target_head_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_target_head_pos_check() const {
  const ::CMsgVector* p = _impl_.target_head_pos_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::target_head_pos_check() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_head_pos_check)
  return _internal_target_head_pos_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_head_pos_check(
    ::CMsgVector* target_head_pos_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_head_pos_check_);
  }
  _impl_.target_head_pos_check_ = target_head_pos_check;
  if (target_head_pos_check) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_head_pos_check)
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::release_target_head_pos_check() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgVector* temp = _impl_.target_head_pos_check_;
  _impl_.target_head_pos_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::unsafe_arena_release_target_head_pos_check() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_head_pos_check)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgVector* temp = _impl_.target_head_pos_check_;
  _impl_.target_head_pos_check_ = nullptr;
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::_internal_mutable_target_head_pos_check() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_head_pos_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.target_head_pos_check_ = p;
  }
  return _impl_.target_head_pos_check_;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::mutable_target_head_pos_check() {
  ::CMsgVector* _msg = _internal_mutable_target_head_pos_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_head_pos_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_head_pos_check(::CMsgVector* target_head_pos_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_head_pos_check_;
  }
  if (target_head_pos_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_head_pos_check);
    if (message_arena != submessage_arena) {
      target_head_pos_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_head_pos_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_head_pos_check_ = target_head_pos_check;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_head_pos_check)
}

// optional .CMsgVector target_abs_pos_check = 10;
inline bool CSGOInputHistoryEntryPB::_internal_has_target_abs_pos_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_abs_pos_check_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_target_abs_pos_check() const {
  return _internal_has_target_abs_pos_check();
}
inline void CSGOInputHistoryEntryPB::clear_target_abs_pos_check() {
  if (_impl_.target_abs_pos_check_ != nullptr) _impl_.target_abs_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_target_abs_pos_check() const {
  const ::CMsgVector* p = _impl_.target_abs_pos_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::target_abs_pos_check() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_abs_pos_check)
  return _internal_target_abs_pos_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_abs_pos_check(
    ::CMsgVector* target_abs_pos_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_abs_pos_check_);
  }
  _impl_.target_abs_pos_check_ = target_abs_pos_check;
  if (target_abs_pos_check) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_abs_pos_check)
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::release_target_abs_pos_check() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgVector* temp = _impl_.target_abs_pos_check_;
  _impl_.target_abs_pos_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::unsafe_arena_release_target_abs_pos_check() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_abs_pos_check)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgVector* temp = _impl_.target_abs_pos_check_;
  _impl_.target_abs_pos_check_ = nullptr;
  return temp;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::_internal_mutable_target_abs_pos_check() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.target_abs_pos_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.target_abs_pos_check_ = p;
  }
  return _impl_.target_abs_pos_check_;
}
inline ::CMsgVector* CSGOInputHistoryEntryPB::mutable_target_abs_pos_check() {
  ::CMsgVector* _msg = _internal_mutable_target_abs_pos_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_abs_pos_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_abs_pos_check(::CMsgVector* target_abs_pos_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_abs_pos_check_;
  }
  if (target_abs_pos_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_abs_pos_check);
    if (message_arena != submessage_arena) {
      target_abs_pos_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_abs_pos_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.target_abs_pos_check_ = target_abs_pos_check;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_abs_pos_check)
}

// optional .CMsgQAngle target_abs_ang_check = 11;
inline bool CSGOInputHistoryEntryPB::_internal_has_target_abs_ang_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_abs_ang_check_ != nullptr);
  return value;
}
inline bool CSGOInputHistoryEntryPB::has_target_abs_ang_check() const {
  return _internal_has_target_abs_ang_check();
}
inline void CSGOInputHistoryEntryPB::clear_target_abs_ang_check() {
  if (_impl_.target_abs_ang_check_ != nullptr) _impl_.target_abs_ang_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::_internal_target_abs_ang_check() const {
  const ::CMsgQAngle* p = _impl_.target_abs_ang_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::target_abs_ang_check() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_abs_ang_check)
  return _internal_target_abs_ang_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_abs_ang_check(
    ::CMsgQAngle* target_abs_ang_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_abs_ang_check_);
  }
  _impl_.target_abs_ang_check_ = target_abs_ang_check;
  if (target_abs_ang_check) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_abs_ang_check)
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::release_target_abs_ang_check() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgQAngle* temp = _impl_.target_abs_ang_check_;
  _impl_.target_abs_ang_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::unsafe_arena_release_target_abs_ang_check() {
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_abs_ang_check)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgQAngle* temp = _impl_.target_abs_ang_check_;
  _impl_.target_abs_ang_check_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::_internal_mutable_target_abs_ang_check() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.target_abs_ang_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    _impl_.target_abs_ang_check_ = p;
  }
  return _impl_.target_abs_ang_check_;
}
inline ::CMsgQAngle* CSGOInputHistoryEntryPB::mutable_target_abs_ang_check() {
  ::CMsgQAngle* _msg = _internal_mutable_target_abs_ang_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_abs_ang_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_abs_ang_check(::CMsgQAngle* target_abs_ang_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_abs_ang_check_;
  }
  if (target_abs_ang_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_abs_ang_check);
    if (message_arena != submessage_arena) {
      target_abs_ang_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_abs_ang_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.target_abs_ang_check_ = target_abs_ang_check;
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_abs_ang_check)
}

// -------------------------------------------------------------------

// CSGOUserCmdPB

// optional .CBaseUserCmdPB base = 1;
inline bool CSGOUserCmdPB::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool CSGOUserCmdPB::has_base() const {
  return _internal_has_base();
}
inline void CSGOUserCmdPB::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CBaseUserCmdPB& CSGOUserCmdPB::_internal_base() const {
  const ::CBaseUserCmdPB* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBaseUserCmdPB&>(
      ::_CBaseUserCmdPB_default_instance_);
}
inline const ::CBaseUserCmdPB& CSGOUserCmdPB::base() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.base)
  return _internal_base();
}
inline void CSGOUserCmdPB::unsafe_arena_set_allocated_base(
    ::CBaseUserCmdPB* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOUserCmdPB.base)
}
inline ::CBaseUserCmdPB* CSGOUserCmdPB::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBaseUserCmdPB* CSGOUserCmdPB::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CSGOUserCmdPB.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::CBaseUserCmdPB* CSGOUserCmdPB::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBaseUserCmdPB>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::CBaseUserCmdPB* CSGOUserCmdPB::mutable_base() {
  ::CBaseUserCmdPB* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CSGOUserCmdPB.base)
  return _msg;
}
inline void CSGOUserCmdPB::set_allocated_base(::CBaseUserCmdPB* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CSGOUserCmdPB.base)
}

// repeated .CSGOInputHistoryEntryPB input_history = 2;
inline int CSGOUserCmdPB::_internal_input_history_size() const {
  return _impl_.input_history_.size();
}
inline int CSGOUserCmdPB::input_history_size() const {
  return _internal_input_history_size();
}
inline void CSGOUserCmdPB::clear_input_history() {
  _impl_.input_history_.Clear();
}
inline ::CSGOInputHistoryEntryPB* CSGOUserCmdPB::mutable_input_history(int index) {
  // @@protoc_insertion_point(field_mutable:CSGOUserCmdPB.input_history)
  return _impl_.input_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSGOInputHistoryEntryPB >*
CSGOUserCmdPB::mutable_input_history() {
  // @@protoc_insertion_point(field_mutable_list:CSGOUserCmdPB.input_history)
  return &_impl_.input_history_;
}
inline const ::CSGOInputHistoryEntryPB& CSGOUserCmdPB::_internal_input_history(int index) const {
  return _impl_.input_history_.Get(index);
}
inline const ::CSGOInputHistoryEntryPB& CSGOUserCmdPB::input_history(int index) const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.input_history)
  return _internal_input_history(index);
}
inline ::CSGOInputHistoryEntryPB* CSGOUserCmdPB::_internal_add_input_history() {
  return _impl_.input_history_.Add();
}
inline ::CSGOInputHistoryEntryPB* CSGOUserCmdPB::add_input_history() {
  ::CSGOInputHistoryEntryPB* _add = _internal_add_input_history();
  // @@protoc_insertion_point(field_add:CSGOUserCmdPB.input_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSGOInputHistoryEntryPB >&
CSGOUserCmdPB::input_history() const {
  // @@protoc_insertion_point(field_list:CSGOUserCmdPB.input_history)
  return _impl_.input_history_;
}

// optional int32 attack1_start_history_index = 6 [default = -1];
inline bool CSGOUserCmdPB::_internal_has_attack1_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSGOUserCmdPB::has_attack1_start_history_index() const {
  return _internal_has_attack1_start_history_index();
}
inline void CSGOUserCmdPB::clear_attack1_start_history_index() {
  _impl_.attack1_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CSGOUserCmdPB::_internal_attack1_start_history_index() const {
  return _impl_.attack1_start_history_index_;
}
inline int32_t CSGOUserCmdPB::attack1_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack1_start_history_index)
  return _internal_attack1_start_history_index();
}
inline void CSGOUserCmdPB::_internal_set_attack1_start_history_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.attack1_start_history_index_ = value;
}
inline void CSGOUserCmdPB::set_attack1_start_history_index(int32_t value) {
  _internal_set_attack1_start_history_index(value);
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack1_start_history_index)
}

// optional int32 attack2_start_history_index = 7 [default = -1];
inline bool CSGOUserCmdPB::_internal_has_attack2_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSGOUserCmdPB::has_attack2_start_history_index() const {
  return _internal_has_attack2_start_history_index();
}
inline void CSGOUserCmdPB::clear_attack2_start_history_index() {
  _impl_.attack2_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CSGOUserCmdPB::_internal_attack2_start_history_index() const {
  return _impl_.attack2_start_history_index_;
}
inline int32_t CSGOUserCmdPB::attack2_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack2_start_history_index)
  return _internal_attack2_start_history_index();
}
inline void CSGOUserCmdPB::_internal_set_attack2_start_history_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.attack2_start_history_index_ = value;
}
inline void CSGOUserCmdPB::set_attack2_start_history_index(int32_t value) {
  _internal_set_attack2_start_history_index(value);
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack2_start_history_index)
}

// optional int32 attack3_start_history_index = 8 [default = -1];
inline bool CSGOUserCmdPB::_internal_has_attack3_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSGOUserCmdPB::has_attack3_start_history_index() const {
  return _internal_has_attack3_start_history_index();
}
inline void CSGOUserCmdPB::clear_attack3_start_history_index() {
  _impl_.attack3_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CSGOUserCmdPB::_internal_attack3_start_history_index() const {
  return _impl_.attack3_start_history_index_;
}
inline int32_t CSGOUserCmdPB::attack3_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack3_start_history_index)
  return _internal_attack3_start_history_index();
}
inline void CSGOUserCmdPB::_internal_set_attack3_start_history_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.attack3_start_history_index_ = value;
}
inline void CSGOUserCmdPB::set_attack3_start_history_index(int32_t value) {
  _internal_set_attack3_start_history_index(value);
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack3_start_history_index)
}

// optional .CSGOUserCmdPB.EWeaponDecision weapon_decision = 9 [default = k_eNone];
inline bool CSGOUserCmdPB::_internal_has_weapon_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSGOUserCmdPB::has_weapon_decision() const {
  return _internal_has_weapon_decision();
}
inline void CSGOUserCmdPB::clear_weapon_decision() {
  _impl_.weapon_decision_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSGOUserCmdPB_EWeaponDecision CSGOUserCmdPB::_internal_weapon_decision() const {
  return static_cast< ::CSGOUserCmdPB_EWeaponDecision >(_impl_.weapon_decision_);
}
inline ::CSGOUserCmdPB_EWeaponDecision CSGOUserCmdPB::weapon_decision() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.weapon_decision)
  return _internal_weapon_decision();
}
inline void CSGOUserCmdPB::_internal_set_weapon_decision(::CSGOUserCmdPB_EWeaponDecision value) {
  assert(::CSGOUserCmdPB_EWeaponDecision_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.weapon_decision_ = value;
}
inline void CSGOUserCmdPB::set_weapon_decision(::CSGOUserCmdPB_EWeaponDecision value) {
  _internal_set_weapon_decision(value);
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.weapon_decision)
}

// optional int32 weapon_decision_weapon = 10;
inline bool CSGOUserCmdPB::_internal_has_weapon_decision_weapon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSGOUserCmdPB::has_weapon_decision_weapon() const {
  return _internal_has_weapon_decision_weapon();
}
inline void CSGOUserCmdPB::clear_weapon_decision_weapon() {
  _impl_.weapon_decision_weapon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CSGOUserCmdPB::_internal_weapon_decision_weapon() const {
  return _impl_.weapon_decision_weapon_;
}
inline int32_t CSGOUserCmdPB::weapon_decision_weapon() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.weapon_decision_weapon)
  return _internal_weapon_decision_weapon();
}
inline void CSGOUserCmdPB::_internal_set_weapon_decision_weapon(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.weapon_decision_weapon_ = value;
}
inline void CSGOUserCmdPB::set_weapon_decision_weapon(int32_t value) {
  _internal_set_weapon_decision_weapon(value);
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.weapon_decision_weapon)
}

// -------------------------------------------------------------------

// CUserMessage_Inventory_Response_InventoryDetail

// optional int32 index = 1;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_index() const {
  return _internal_has_index();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::_internal_index() const {
  return _impl_.index_;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::index() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.index)
  return _internal_index();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.index_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.index)
}

// optional int64 primary = 2;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_primary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_primary() const {
  return _internal_has_primary();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_primary() {
  _impl_.primary_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::_internal_primary() const {
  return _impl_.primary_;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::primary() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.primary)
  return _internal_primary();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_primary(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.primary_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_primary(int64_t value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.primary)
}

// optional int64 offset = 3;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_offset() const {
  return _internal_has_offset();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_offset() {
  _impl_.offset_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::offset() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.offset)
  return _internal_offset();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_offset(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.offset)
}

// optional int64 first = 4;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_first() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_first() const {
  return _internal_has_first();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_first() {
  _impl_.first_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::_internal_first() const {
  return _impl_.first_;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::first() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.first)
  return _internal_first();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_first(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.first_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_first(int64_t value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.first)
}

// optional int64 base = 5;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_base() const {
  return _internal_has_base();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_base() {
  _impl_.base_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::_internal_base() const {
  return _impl_.base_;
}
inline int64_t CUserMessage_Inventory_Response_InventoryDetail::base() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.base)
  return _internal_base();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_base(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.base_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_base(int64_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.base)
}

// optional string name = 6;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_name() const {
  return _internal_has_name();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUserMessage_Inventory_Response_InventoryDetail::name() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserMessage_Inventory_Response_InventoryDetail::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.name)
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CUserMessage_Inventory_Response.InventoryDetail.name)
  return _s;
}
inline const std::string& CUserMessage_Inventory_Response_InventoryDetail::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::release_name() {
  // @@protoc_insertion_point(field_release:CUserMessage_Inventory_Response.InventoryDetail.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserMessage_Inventory_Response.InventoryDetail.name)
}

// optional string base_name = 7;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_base_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_base_name() const {
  return _internal_has_base_name();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_base_name() {
  _impl_.base_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CUserMessage_Inventory_Response_InventoryDetail::base_name() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.base_name)
  return _internal_base_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUserMessage_Inventory_Response_InventoryDetail::set_base_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.base_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.base_name)
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::mutable_base_name() {
  std::string* _s = _internal_mutable_base_name();
  // @@protoc_insertion_point(field_mutable:CUserMessage_Inventory_Response.InventoryDetail.base_name)
  return _s;
}
inline const std::string& CUserMessage_Inventory_Response_InventoryDetail::_internal_base_name() const {
  return _impl_.base_name_.Get();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_base_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::_internal_mutable_base_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.base_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CUserMessage_Inventory_Response_InventoryDetail::release_base_name() {
  // @@protoc_insertion_point(field_release:CUserMessage_Inventory_Response.InventoryDetail.base_name)
  if (!_internal_has_base_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.base_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_name_.IsDefault()) {
    _impl_.base_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_allocated_base_name(std::string* base_name) {
  if (base_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.base_name_.SetAllocated(base_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_name_.IsDefault()) {
    _impl_.base_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CUserMessage_Inventory_Response.InventoryDetail.base_name)
}

// optional int32 base_detail = 8;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_base_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_base_detail() const {
  return _internal_has_base_detail();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_base_detail() {
  _impl_.base_detail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::_internal_base_detail() const {
  return _impl_.base_detail_;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::base_detail() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.base_detail)
  return _internal_base_detail();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_base_detail(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.base_detail_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_base_detail(int32_t value) {
  _internal_set_base_detail(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.base_detail)
}

// optional int32 base_time = 9;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_base_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_base_time() const {
  return _internal_has_base_time();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_base_time() {
  _impl_.base_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::_internal_base_time() const {
  return _impl_.base_time_;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::base_time() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.base_time)
  return _internal_base_time();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_base_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.base_time_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_base_time(int32_t value) {
  _internal_set_base_time(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.base_time)
}

// optional int32 base_hash = 10;
inline bool CUserMessage_Inventory_Response_InventoryDetail::_internal_has_base_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response_InventoryDetail::has_base_hash() const {
  return _internal_has_base_hash();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::clear_base_hash() {
  _impl_.base_hash_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::_internal_base_hash() const {
  return _impl_.base_hash_;
}
inline int32_t CUserMessage_Inventory_Response_InventoryDetail::base_hash() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.InventoryDetail.base_hash)
  return _internal_base_hash();
}
inline void CUserMessage_Inventory_Response_InventoryDetail::_internal_set_base_hash(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.base_hash_ = value;
}
inline void CUserMessage_Inventory_Response_InventoryDetail::set_base_hash(int32_t value) {
  _internal_set_base_hash(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.InventoryDetail.base_hash)
}

// -------------------------------------------------------------------

// CUserMessage_Inventory_Response

// optional fixed32 crc = 1;
inline bool CUserMessage_Inventory_Response::_internal_has_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_crc() const {
  return _internal_has_crc();
}
inline void CUserMessage_Inventory_Response::clear_crc() {
  _impl_.crc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CUserMessage_Inventory_Response::_internal_crc() const {
  return _impl_.crc_;
}
inline uint32_t CUserMessage_Inventory_Response::crc() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.crc)
  return _internal_crc();
}
inline void CUserMessage_Inventory_Response::_internal_set_crc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.crc_ = value;
}
inline void CUserMessage_Inventory_Response::set_crc(uint32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.crc)
}

// optional int32 item_count = 2;
inline bool CUserMessage_Inventory_Response::_internal_has_item_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_item_count() const {
  return _internal_has_item_count();
}
inline void CUserMessage_Inventory_Response::clear_item_count() {
  _impl_.item_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_item_count() const {
  return _impl_.item_count_;
}
inline int32_t CUserMessage_Inventory_Response::item_count() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.item_count)
  return _internal_item_count();
}
inline void CUserMessage_Inventory_Response::_internal_set_item_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_count_ = value;
}
inline void CUserMessage_Inventory_Response::set_item_count(int32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.item_count)
}

// optional int32 osversion = 5;
inline bool CUserMessage_Inventory_Response::_internal_has_osversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_osversion() const {
  return _internal_has_osversion();
}
inline void CUserMessage_Inventory_Response::clear_osversion() {
  _impl_.osversion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_osversion() const {
  return _impl_.osversion_;
}
inline int32_t CUserMessage_Inventory_Response::osversion() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.osversion)
  return _internal_osversion();
}
inline void CUserMessage_Inventory_Response::_internal_set_osversion(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.osversion_ = value;
}
inline void CUserMessage_Inventory_Response::set_osversion(int32_t value) {
  _internal_set_osversion(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.osversion)
}

// optional int32 perf_time = 6;
inline bool CUserMessage_Inventory_Response::_internal_has_perf_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_perf_time() const {
  return _internal_has_perf_time();
}
inline void CUserMessage_Inventory_Response::clear_perf_time() {
  _impl_.perf_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_perf_time() const {
  return _impl_.perf_time_;
}
inline int32_t CUserMessage_Inventory_Response::perf_time() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.perf_time)
  return _internal_perf_time();
}
inline void CUserMessage_Inventory_Response::_internal_set_perf_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.perf_time_ = value;
}
inline void CUserMessage_Inventory_Response::set_perf_time(int32_t value) {
  _internal_set_perf_time(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.perf_time)
}

// optional int32 client_timestamp = 7;
inline bool CUserMessage_Inventory_Response::_internal_has_client_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_client_timestamp() const {
  return _internal_has_client_timestamp();
}
inline void CUserMessage_Inventory_Response::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline int32_t CUserMessage_Inventory_Response::client_timestamp() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.client_timestamp)
  return _internal_client_timestamp();
}
inline void CUserMessage_Inventory_Response::_internal_set_client_timestamp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.client_timestamp_ = value;
}
inline void CUserMessage_Inventory_Response::set_client_timestamp(int32_t value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.client_timestamp)
}

// optional int32 platform = 8;
inline bool CUserMessage_Inventory_Response::_internal_has_platform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_platform() const {
  return _internal_has_platform();
}
inline void CUserMessage_Inventory_Response::clear_platform() {
  _impl_.platform_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_platform() const {
  return _impl_.platform_;
}
inline int32_t CUserMessage_Inventory_Response::platform() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.platform)
  return _internal_platform();
}
inline void CUserMessage_Inventory_Response::_internal_set_platform(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.platform_ = value;
}
inline void CUserMessage_Inventory_Response::set_platform(int32_t value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.platform)
}

// repeated .CUserMessage_Inventory_Response.InventoryDetail inventories = 9;
inline int CUserMessage_Inventory_Response::_internal_inventories_size() const {
  return _impl_.inventories_.size();
}
inline int CUserMessage_Inventory_Response::inventories_size() const {
  return _internal_inventories_size();
}
inline void CUserMessage_Inventory_Response::clear_inventories() {
  _impl_.inventories_.Clear();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::mutable_inventories(int index) {
  // @@protoc_insertion_point(field_mutable:CUserMessage_Inventory_Response.inventories)
  return _impl_.inventories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
CUserMessage_Inventory_Response::mutable_inventories() {
  // @@protoc_insertion_point(field_mutable_list:CUserMessage_Inventory_Response.inventories)
  return &_impl_.inventories_;
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::_internal_inventories(int index) const {
  return _impl_.inventories_.Get(index);
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::inventories(int index) const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.inventories)
  return _internal_inventories(index);
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::_internal_add_inventories() {
  return _impl_.inventories_.Add();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::add_inventories() {
  ::CUserMessage_Inventory_Response_InventoryDetail* _add = _internal_add_inventories();
  // @@protoc_insertion_point(field_add:CUserMessage_Inventory_Response.inventories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
CUserMessage_Inventory_Response::inventories() const {
  // @@protoc_insertion_point(field_list:CUserMessage_Inventory_Response.inventories)
  return _impl_.inventories_;
}

// repeated .CUserMessage_Inventory_Response.InventoryDetail inventories2 = 10;
inline int CUserMessage_Inventory_Response::_internal_inventories2_size() const {
  return _impl_.inventories2_.size();
}
inline int CUserMessage_Inventory_Response::inventories2_size() const {
  return _internal_inventories2_size();
}
inline void CUserMessage_Inventory_Response::clear_inventories2() {
  _impl_.inventories2_.Clear();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::mutable_inventories2(int index) {
  // @@protoc_insertion_point(field_mutable:CUserMessage_Inventory_Response.inventories2)
  return _impl_.inventories2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
CUserMessage_Inventory_Response::mutable_inventories2() {
  // @@protoc_insertion_point(field_mutable_list:CUserMessage_Inventory_Response.inventories2)
  return &_impl_.inventories2_;
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::_internal_inventories2(int index) const {
  return _impl_.inventories2_.Get(index);
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::inventories2(int index) const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.inventories2)
  return _internal_inventories2(index);
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::_internal_add_inventories2() {
  return _impl_.inventories2_.Add();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::add_inventories2() {
  ::CUserMessage_Inventory_Response_InventoryDetail* _add = _internal_add_inventories2();
  // @@protoc_insertion_point(field_add:CUserMessage_Inventory_Response.inventories2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
CUserMessage_Inventory_Response::inventories2() const {
  // @@protoc_insertion_point(field_list:CUserMessage_Inventory_Response.inventories2)
  return _impl_.inventories2_;
}

// repeated .CUserMessage_Inventory_Response.InventoryDetail inventories3 = 14;
inline int CUserMessage_Inventory_Response::_internal_inventories3_size() const {
  return _impl_.inventories3_.size();
}
inline int CUserMessage_Inventory_Response::inventories3_size() const {
  return _internal_inventories3_size();
}
inline void CUserMessage_Inventory_Response::clear_inventories3() {
  _impl_.inventories3_.Clear();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::mutable_inventories3(int index) {
  // @@protoc_insertion_point(field_mutable:CUserMessage_Inventory_Response.inventories3)
  return _impl_.inventories3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >*
CUserMessage_Inventory_Response::mutable_inventories3() {
  // @@protoc_insertion_point(field_mutable_list:CUserMessage_Inventory_Response.inventories3)
  return &_impl_.inventories3_;
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::_internal_inventories3(int index) const {
  return _impl_.inventories3_.Get(index);
}
inline const ::CUserMessage_Inventory_Response_InventoryDetail& CUserMessage_Inventory_Response::inventories3(int index) const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.inventories3)
  return _internal_inventories3(index);
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::_internal_add_inventories3() {
  return _impl_.inventories3_.Add();
}
inline ::CUserMessage_Inventory_Response_InventoryDetail* CUserMessage_Inventory_Response::add_inventories3() {
  ::CUserMessage_Inventory_Response_InventoryDetail* _add = _internal_add_inventories3();
  // @@protoc_insertion_point(field_add:CUserMessage_Inventory_Response.inventories3)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUserMessage_Inventory_Response_InventoryDetail >&
CUserMessage_Inventory_Response::inventories3() const {
  // @@protoc_insertion_point(field_list:CUserMessage_Inventory_Response.inventories3)
  return _impl_.inventories3_;
}

// optional int32 inv_type = 11;
inline bool CUserMessage_Inventory_Response::_internal_has_inv_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_inv_type() const {
  return _internal_has_inv_type();
}
inline void CUserMessage_Inventory_Response::clear_inv_type() {
  _impl_.inv_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_inv_type() const {
  return _impl_.inv_type_;
}
inline int32_t CUserMessage_Inventory_Response::inv_type() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.inv_type)
  return _internal_inv_type();
}
inline void CUserMessage_Inventory_Response::_internal_set_inv_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.inv_type_ = value;
}
inline void CUserMessage_Inventory_Response::set_inv_type(int32_t value) {
  _internal_set_inv_type(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.inv_type)
}

// optional int32 build_version = 12;
inline bool CUserMessage_Inventory_Response::_internal_has_build_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_build_version() const {
  return _internal_has_build_version();
}
inline void CUserMessage_Inventory_Response::clear_build_version() {
  _impl_.build_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_build_version() const {
  return _impl_.build_version_;
}
inline int32_t CUserMessage_Inventory_Response::build_version() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.build_version)
  return _internal_build_version();
}
inline void CUserMessage_Inventory_Response::_internal_set_build_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.build_version_ = value;
}
inline void CUserMessage_Inventory_Response::set_build_version(int32_t value) {
  _internal_set_build_version(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.build_version)
}

// optional int32 instance = 13;
inline bool CUserMessage_Inventory_Response::_internal_has_instance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_instance() const {
  return _internal_has_instance();
}
inline void CUserMessage_Inventory_Response::clear_instance() {
  _impl_.instance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CUserMessage_Inventory_Response::_internal_instance() const {
  return _impl_.instance_;
}
inline int32_t CUserMessage_Inventory_Response::instance() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.instance)
  return _internal_instance();
}
inline void CUserMessage_Inventory_Response::_internal_set_instance(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.instance_ = value;
}
inline void CUserMessage_Inventory_Response::set_instance(int32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.instance)
}

// optional int64 start_time = 15;
inline bool CUserMessage_Inventory_Response::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CUserMessage_Inventory_Response::has_start_time() const {
  return _internal_has_start_time();
}
inline void CUserMessage_Inventory_Response::clear_start_time() {
  _impl_.start_time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t CUserMessage_Inventory_Response::_internal_start_time() const {
  return _impl_.start_time_;
}
inline int64_t CUserMessage_Inventory_Response::start_time() const {
  // @@protoc_insertion_point(field_get:CUserMessage_Inventory_Response.start_time)
  return _internal_start_time();
}
inline void CUserMessage_Inventory_Response::_internal_set_start_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.start_time_ = value;
}
inline void CUserMessage_Inventory_Response::set_start_time(int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CUserMessage_Inventory_Response.start_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSGOUserCmdPB_EWeaponDecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSGOUserCmdPB_EWeaponDecision>() {
  return ::CSGOUserCmdPB_EWeaponDecision_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobufs_2eproto
